---

> Iâ€™m developing a web platform called **HomiTutor**. Please understand and remember the following detailed technology stack and architecture choices Iâ€™ve made for this project:

âœ… **Frontend stack:**

* **ReactJS** â†’ for building user interfaces (with functional components + hooks)
* **Material UI (MUI)** â†’ for UI components and theming
* **Redux Toolkit** â†’ for state management
* **React Router v6+** â†’ for client-side routing
* **Axios** â†’ for API calls
* **ES Modules** syntax (using `import`/`export`)

âœ… **Frontend structure:**

* Folder structure is **feature-based/module-based**
* Pages, components, hooks, redux slices are organized by feature
* Always updates `App.jsx` when adding a new route
* Uses a `MainLayout` and role-based `DashboardLayout`
* Supports `PrivateRoute` and `UnauthorizedPage`

---

âœ… **Backend stack:**

* **Node.js** â†’ backend runtime
* **Express.js** â†’ backend framework
* **MongoDB** â†’ database
* **Mongoose** â†’ ODM for MongoDB
* **JWT (jsonwebtoken)** â†’ for authentication
* **bcrypt** â†’ for password hashing
* **Cloudinary SDK** â†’ for image upload (via `uploadService.js`)
* **ES Modules** syntax (using `import`/`export`)

âœ… **Backend structure:**

* Routes are mounted under `/api/v1/`
* Controllers export **named exports**
* Uses `authMiddleware` for protecting routes (checks JWT + user role)
* Uses `uploadService.js` to upload images to Cloudinary (and stores only URLs in DB)
* Separate folders for `models/`, `controllers/`, `routes/`, `middlewares/`, `services/`

---

âœ… **Authentication & Authorization:**

* Supports **three roles**: `"student"`, `"tutor"`, `"admin"`
* Role-based access control via `PrivateRoute` (frontend) and `authMiddleware` (backend)
* JWT stored in `localStorage` and Redux state
* Login persistence implemented on frontend

---

âœ… **Development conventions:**

* Clean code
* No redundant code
* Every frontend page must be registered in `App.jsx`
* Every backend API uses async/await, try/catch, `res.status().json({...})`
* All image uploads are stored in **Cloudinary** â†’ only the returned URL is saved in the database

---

âœ… **Current project progress:**

* Authentication flow fully implemented (frontend + backend)
* `TutorProfileModel`, `AdModel`, `uploadService.js` already written
* Frontend pages (TutorDashboardPage, TutorProfilePage, TutorAdsPage, etc.) already implemented
* Backend controllers and routes for TutorProfile and Ads API are **pending**

---

ðŸ‘‰ Based on this technology stack and project setup, you will continue assisting me with prompts, code, or instructions that follow all these conventions.

---