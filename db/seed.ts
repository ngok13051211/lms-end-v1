// seed.ts
import { db } from "./index";
import * as schema from "@shared/schema";
import bcrypt from "bcrypt";
import { eq, inArray } from "drizzle-orm";
import { sql } from "drizzle-orm";

async function seed() {
  try {
    console.log("üå± Seeding database...");

    // Create a common password hash for all users
    const passwordHash = await bcrypt.hash("123123", 10);

    // Admin
    let [admin] = await db
      .select()
      .from(schema.users)
      .where(eq(schema.users.email, "admin@homitutor.vn"));
    if (!admin) {
      [admin] = await db
        .insert(schema.users)
        .values({
          username: "admin",
          email: "admin@homitutor.vn",
          password: await bcrypt.hash("admin123", 10),
          first_name: "Qu·∫£n",
          last_name: "Tr·ªã Vi√™n",
          role: "admin",
          is_verified: true,
          is_active: true,
          avatar: "",
          phone: "0987654321",
          created_at: new Date(),
          updated_at: new Date(),
        })
        .returning();
    }

    // ======= INSERT USERS =======
    // Create 10 tutors and 10 students with realistic Vietnamese information
    const tutors = [
      {
        username: "nguyenthanhminh",
        email: "nguyenthanhminh@gmail.com",
        password: passwordHash,
        first_name: "Minh",
        last_name: "Nguy·ªÖn Thanh",
        role: "tutor",
        date_of_birth: new Date("1990-05-15").toISOString(),
        address: "123 L√™ L·ª£i, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0901234567",
        avatar: "https://randomuser.me/api/portraits/men/1.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamthihuong",
        email: "phamthihuong@gmail.com",
        password: passwordHash,
        first_name: "H∆∞∆°ng",
        last_name: "Ph·∫°m Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1988-09-23").toISOString(),
        address: "45 Nguy·ªÖn Hu·ªá, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0912345678",
        avatar: "https://randomuser.me/api/portraits/women/2.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranthiha",
        email: "tranthiha@gmail.com",
        password: passwordHash,
        first_name: "H√†",
        last_name: "Tr·∫ßn Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1992-03-12").toISOString(),
        address: "78 ƒê·ªìng Kh·ªüi, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0923456789",
        avatar: "https://randomuser.me/api/portraits/women/3.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "levantrung",
        email: "levantrung@gmail.com",
        password: passwordHash,
        first_name: "Trung",
        last_name: "L√™ VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1985-11-07").toISOString(),
        address: "234 Nguy·ªÖn Tr√£i, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0934567890",
        avatar: "https://randomuser.me/api/portraits/men/4.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "vuthihien",
        email: "vuthihien@gmail.com",
        password: passwordHash,
        first_name: "Hi·ªÅn",
        last_name: "V≈© Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1991-04-25").toISOString(),
        address: "56 L√Ω T·ª± Tr·ªçng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0945678901",
        avatar: "https://randomuser.me/api/portraits/women/5.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenvanhai",
        email: "nguyenvanhai@gmail.com",
        password: passwordHash,
        first_name: "H·∫£i",
        last_name: "Nguy·ªÖn VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1989-07-30").toISOString(),
        address: "102 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n B√¨nh Th·∫°nh, TP. H·ªì Ch√≠ Minh",
        phone: "0956789012",
        avatar: "https://randomuser.me/api/portraits/men/6.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "hoangthilan",
        email: "hoangthilan@gmail.com",
        password: passwordHash,
        first_name: "Lan",
        last_name: "Ho√†ng Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1993-02-14").toISOString(),
        address: "75 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0967890123",
        avatar: "https://randomuser.me/api/portraits/women/7.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranvanduc",
        email: "tranvanduc@gmail.com",
        password: passwordHash,
        first_name: "ƒê·ª©c",
        last_name: "Tr·∫ßn VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1987-10-05").toISOString(),
        address: "321 V√µ VƒÉn Ng√¢n, Qu·∫≠n Th·ªß ƒê·ª©c, TP. H·ªì Ch√≠ Minh",
        phone: "0978901234",
        avatar: "https://randomuser.me/api/portraits/men/8.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamthithanh",
        email: "phamthithanh@gmail.com",
        password: passwordHash,
        first_name: "Thanh",
        last_name: "Ph·∫°m Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1994-06-18").toISOString(),
        address: "189 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0989012345",
        avatar: "https://randomuser.me/api/portraits/women/9.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "dangvantuan",
        email: "dangvantuan@gmail.com",
        password: passwordHash,
        first_name: "Tu·∫•n",
        last_name: "ƒê·∫∑ng VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1986-12-22").toISOString(),
        address: "67 Ph·∫°m Ng·ªçc Th·∫°ch, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0990123456",
        avatar: "https://randomuser.me/api/portraits/men/10.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ];

    const students = [
      {
        username: "nguyenthinguyen",
        email: "nguyenthinguyen@gmail.com",
        password: passwordHash,
        first_name: "Nguy√™n",
        last_name: "Nguy·ªÖn Th·ªã",
        role: "student",
        date_of_birth: new Date("2000-02-10").toISOString(),
        address: "45 Tr·∫ßn Ph√∫, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0801234567",
        avatar: "https://randomuser.me/api/portraits/women/11.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranvanbinh",
        email: "tranvanbinh@gmail.com",
        password: passwordHash,
        first_name: "B√¨nh",
        last_name: "Tr·∫ßn VƒÉn",
        role: "student",
        date_of_birth: new Date("1998-08-15").toISOString(),
        address: "123 B√† H·∫°t, Qu·∫≠n 10, TP. H·ªì Ch√≠ Minh",
        phone: "0812345678",
        avatar: "https://randomuser.me/api/portraits/men/12.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "levanthanh",
        email: "levanthanh@gmail.com",
        password: passwordHash,
        first_name: "Th√†nh",
        last_name: "L√™ VƒÉn",
        role: "student",
        date_of_birth: new Date("1999-04-20").toISOString(),
        address: "56 L√™ VƒÉn S·ªπ, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP. H·ªì Ch√≠ Minh",
        phone: "0823456789",
        avatar: "https://randomuser.me/api/portraits/men/13.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "vothihong",
        email: "vothihong@gmail.com",
        password: passwordHash,
        first_name: "H·ªìng",
        last_name: "V√µ Th·ªã",
        role: "student",
        date_of_birth: new Date("2001-07-05").toISOString(),
        address: "234 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0834567890",
        avatar: "https://randomuser.me/api/portraits/women/14.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenminhquang",
        email: "nguyenminhquang@gmail.com",
        password: passwordHash,
        first_name: "Quang",
        last_name: "Nguy·ªÖn Minh",
        role: "student",
        date_of_birth: new Date("2002-11-30").toISOString(),
        address: "78 ƒêinh Ti√™n Ho√†ng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0845678901",
        avatar: "https://randomuser.me/api/portraits/men/15.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranthihue",
        email: "tranthihue@gmail.com",
        password: passwordHash,
        first_name: "Hu·ªá",
        last_name: "Tr·∫ßn Th·ªã",
        role: "student",
        date_of_birth: new Date("2000-09-12").toISOString(),
        address: "90 B√† Tri·ªáu, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0856789012",
        avatar: "https://randomuser.me/api/portraits/women/16.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamvanthanh",
        email: "phamvanthanh@gmail.com",
        password: passwordHash,
        first_name: "Th√†nh",
        last_name: "Ph·∫°m VƒÉn",
        role: "student",
        date_of_birth: new Date("1997-03-25").toISOString(),
        address: "123 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP. H·ªì Ch√≠ Minh",
        phone: "0867890123",
        avatar: "https://randomuser.me/api/portraits/men/17.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "hoangthuhuong",
        email: "hoangthuhuong@gmail.com",
        password: passwordHash,
        first_name: "H∆∞∆°ng",
        last_name: "Ho√†ng Thu",
        role: "student",
        date_of_birth: new Date("1999-01-15").toISOString(),
        address: "45 Hai B√† Tr∆∞ng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0878901234",
        avatar: "https://randomuser.me/api/portraits/women/18.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "lethihoa",
        email: "lethihoa@gmail.com",
        password: passwordHash,
        first_name: "Hoa",
        last_name: "L√™ Th·ªã",
        role: "student",
        date_of_birth: new Date("2002-05-20").toISOString(),
        address: "67 Phan ƒê√¨nh Ph√πng, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP. H·ªì Ch√≠ Minh",
        phone: "0889012345",
        avatar: "https://randomuser.me/api/portraits/women/19.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenduchuy",
        email: "nguyenduchuy@gmail.com",
        password: passwordHash,
        first_name: "Huy",
        last_name: "Nguy·ªÖn ƒê·ª©c",
        role: "student",
        date_of_birth: new Date("2001-10-10").toISOString(),
        address: "34 Nguy·ªÖn ƒê√¨nh Chi·ªÉu, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0890123456",
        avatar: "https://randomuser.me/api/portraits/men/20.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ]; // Check for existing users first to avoid duplicates
    const allUserEmails = [...tutors, ...students].map((user) => user.email);
    const existingUsers =
      allUserEmails.length > 0
        ? await db
            .select({ email: schema.users.email })
            .from(schema.users)
            .where(inArray(schema.users.email, allUserEmails))
        : [];

    const existingEmails = new Set(existingUsers.map((user) => user.email));

    // Filter out any users that already exist in the database
    const newTutors = tutors.filter(
      (tutor) => !existingEmails.has(tutor.email)
    );
    const newStudents = students.filter(
      (student) => !existingEmails.has(student.email)
    );
    // Combine the filtered arrays
    const usersToInsert = [...newTutors, ...newStudents]; // Map through your users and convert dates properly according to schema expectations
    const usersWithProperDates = usersToInsert.map((user) => {
      // Create a base user object with the date fields converted
      const userWithDates = {
        ...user,
        created_at: new Date(user.created_at), // Convert string to Date object
        updated_at: new Date(user.updated_at), // Convert string to Date object
      };

      // Handle date_of_birth specially based on its expected type in the schema
      if (user.date_of_birth) {
        // In the schema, date_of_birth is a text field, so we keep it as string
        userWithDates.date_of_birth = user.date_of_birth; // Keep as string since schema expects text type
      }

      return userWithDates;
    });

    // Use the converted array for insertion
    const insertedUsers =
      usersWithProperDates.length > 0
        ? await db.insert(schema.users).values(usersWithProperDates).returning({
            id: schema.users.id,
            email: schema.users.email,
            role: schema.users.role,
          })
        : [];

    console.log(
      `‚úÖ Inserted ${insertedUsers.length} users. ${existingEmails.size} users already existed.`
    );

    // ======= INSERT SUBJECTS =======
    const subjects = [
      // C√°c m√¥n c∆° b·∫£n (cho m·ªçi c·∫•p h·ªçc)
      {
        name: "To√°n h·ªçc",
        icon: "calculate",
        description:
          "Ph√°t tri·ªÉn t∆∞ duy logic v√† k·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ qua c√°c b√†i to√°n t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
      },
      {
        name: "Ti·∫øng Anh",
        icon: "language",
        description:
          "N√¢ng cao 4 k·ªπ nƒÉng nghe, n√≥i, ƒë·ªçc, vi·∫øt v√† chu·∫©n b·ªã cho c√°c k·ª≥ thi qu·ªëc t·∫ø IELTS, TOEFL",
      },
      {
        name: "Ng·ªØ vƒÉn",
        icon: "book_open",
        description:
          "R√®n luy·ªán k·ªπ nƒÉng ph√¢n t√≠ch, c·∫£m th·ª• vƒÉn h·ªçc v√† ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán",
      },

      // M√¥n khoa h·ªçc t·ª± nhi√™n
      {
        name: "V·∫≠t l√Ω",
        icon: "bolt",
        description:
          "Kh√°m ph√° c√°c quy lu·∫≠t v·∫≠n ƒë·ªông c·ªßa v·∫≠t ch·∫•t v√† ·ª©ng d·ª•ng v√†o th·ª±c ti·ªÖn cu·ªôc s·ªëng",
      },
      {
        name: "H√≥a h·ªçc",
        icon: "science",
        description:
          "T√¨m hi·ªÉu v·ªÅ c·∫•u tr√∫c, t√≠nh ch·∫•t c·ªßa v·∫≠t ch·∫•t v√† c√°c ph·∫£n ·ª©ng h√≥a h·ªçc th√¥ng qua th√≠ nghi·ªám",
      },
      {
        name: "Sinh h·ªçc",
        icon: "biotech",
        description:
          "Kh√°m ph√° th·∫ø gi·ªõi s·ªëng t·ª´ c·∫•p ƒë·ªô ph√¢n t·ª≠ ƒë·∫øn h·ªá sinh th√°i v√† ·ª©ng d·ª•ng trong y h·ªçc, n√¥ng nghi·ªáp",
      },

      // M√¥n khoa h·ªçc x√£ h·ªôi
      {
        name: "L·ªãch s·ª≠",
        icon: "history",
        description:
          "T√¨m hi·ªÉu v·ªÅ qu√° kh·ª© ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ hi·ªán t·∫°i v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai",
      },
      {
        name: "ƒê·ªãa l√Ω",
        icon: "public",
        description:
          "Kh√°m ph√° th·∫ø gi·ªõi t·ª± nhi√™n v√† x√£ h·ªôi, m·ªëi quan h·ªá gi·ªØa con ng∆∞·ªùi v·ªõi m√¥i tr∆∞·ªùng",
      },

      // C√°c m√¥n nƒÉng khi·∫øu
      {
        name: "√Çm nh·∫°c",
        icon: "music_note",
        description:
          "Ph√°t tri·ªÉn nƒÉng khi·∫øu √¢m nh·∫°c qua vi·ªác h·ªçc nh·∫°c c·ª•, thanh nh·∫°c v√† l√Ω thuy·∫øt √¢m nh·∫°c",
      },

      // M√¥n c√¥ng ngh·ªá
      {
        name: "Tin h·ªçc",
        icon: "computer",
        description:
          "L√†m quen v·ªõi m√°y t√≠nh, h·ªçc c√°c ph·∫ßn m·ªÅm c∆° b·∫£n v√† ng√¥n ng·ªØ l·∫≠p tr√¨nh cho m·ªçi l·ª©a tu·ªïi",
      },

      // D√†nh cho sinh vi√™n ƒë·∫°i h·ªçc
      {
        name: "K·ªπ nƒÉng m·ªÅm",
        icon: "psychology",
        description:
          "Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp, l√†m vi·ªác nh√≥m, qu·∫£n l√Ω th·ªùi gian v√† t∆∞ duy ph·∫£n bi·ªán",
      },
    ];

    // Insert subjects and record their IDs for later association
    const insertedSubjectsMap = new Map();
    for (const sub of subjects) {
      // Add the created_at and updated_at fields to the subject data
      const subjectData = {
        ...sub,
        created_at: new Date(), // Use Date object directly, not string
        updated_at: new Date(), // Use Date object directly, not string
      };

      try {
        // Try to insert the subject
        const [insertedSub] = await db
          .insert(schema.subjects)
          .values(subjectData)
          .onConflictDoNothing()
          .returning();

        if (insertedSub) {
          insertedSubjectsMap.set(insertedSub.name, insertedSub.id);
        } else {
          // If not inserted (already exists), get the existing subject ID
          const [existingSub] = await db
            .select()
            .from(schema.subjects)
            .where(eq(schema.subjects.name, sub.name));

          if (existingSub) {
            insertedSubjectsMap.set(existingSub.name, existingSub.id);
          }
        }
      } catch (error) {
        console.error(`Error inserting subject ${sub.name}:`, error);
      }
    }

    // ======= INSERT EDUCATION LEVELS =======
    const levels = [
      {
        name: "Ti·ªÉu h·ªçc",
        description:
          "H·ªó tr·ª£ n·ªÅn t·∫£ng h·ªçc t·∫≠p v·ªØng ch·∫Øc cho c√°c em h·ªçc sinh 6-11 tu·ªïi",
      },
      {
        name: "THCS",
        description:
          "ƒê·ªìng h√†nh c√πng h·ªçc sinh 11-15 tu·ªïi v∆∞·ª£t qua th·ª≠ th√°ch c·ªßa b·∫≠c trung h·ªçc c∆° s·ªü",
      },
      {
        name: "THPT",
        description:
          "Chu·∫©n b·ªã ki·∫øn th·ª©c v√† k·ªπ nƒÉng cho k·ª≥ thi quan tr·ªçng c·ªßa h·ªçc sinh 15-18 tu·ªïi",
      },
      {
        name: "ƒê·∫°i h·ªçc",
        description:
          "H·ªó tr·ª£ sinh vi√™n trong c√°c m√¥n h·ªçc chuy√™n ng√†nh v√† n√¢ng cao ki·∫øn th·ª©c h·ªçc thu·∫≠t",
      },
      {
        name: "NƒÉng khi·∫øu",
        description:
          "Ph√°t tri·ªÉn t√†i nƒÉng v√† ƒëam m√™ trong c√°c lƒ©nh v·ª±c ngh·ªá thu·∫≠t, th·ªÉ thao v√† c√¥ng ngh·ªá",
      },
    ]; // Insert education levels and record their IDs for later association
    const insertedLevelsMap = new Map();
    for (const level of levels) {
      const currentDate = new Date();
      // Add the created_at and updated_at fields to the level data
      const levelData = {
        ...level,
        created_at: currentDate, // Use Date object directly, not string
        updated_at: currentDate, // Use Date object directly, not string
      };

      try {
        // Try to insert the education level
        const [insertedLevel] = await db
          .insert(schema.educationLevels)
          .values(levelData)
          .onConflictDoNothing()
          .returning();

        if (insertedLevel) {
          insertedLevelsMap.set(insertedLevel.name, insertedLevel.id);
        } else {
          // If not inserted (already exists), get the existing level ID
          const [existingLevel] = await db
            .select()
            .from(schema.educationLevels)
            .where(eq(schema.educationLevels.name, level.name));

          if (existingLevel) {
            insertedLevelsMap.set(existingLevel.name, existingLevel.id);
          }
        }
      } catch (error) {
        console.error(`Error inserting education level ${level.name}:`, error);
      }
    }

    // ======= ASSOCIATE SUBJECTS WITH EDUCATION LEVELS =======
    // Define which subjects are applicable to which education levels
    const subjectLevelAssociations = [
      // C√°c m√¥n c∆° b·∫£n - T·∫•t c·∫£ c√°c c·∫•p h·ªçc
      {
        subjectName: "To√°n h·ªçc",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "Ti·∫øng Anh",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "Ng·ªØ vƒÉn",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },

      // Khoa h·ªçc t·ª± nhi√™n - T·ª´ THCS tr·ªü l√™n
      { subjectName: "V·∫≠t l√Ω", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },
      { subjectName: "H√≥a h·ªçc", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },
      { subjectName: "Sinh h·ªçc", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },

      // Khoa h·ªçc x√£ h·ªôi
      {
        subjectName: "L·ªãch s·ª≠",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "ƒê·ªãa l√Ω",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },

      // C√°c m√¥n nƒÉng khi·∫øu
      {
        subjectName: "√Çm nh·∫°c",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "NƒÉng khi·∫øu"],
      },

      // M√¥n c√¥ng ngh·ªá
      {
        subjectName: "Tin h·ªçc",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },

      // D√†nh cho sinh vi√™n ƒë·∫°i h·ªçc
      { subjectName: "K·ªπ nƒÉng m·ªÅm", levels: ["THPT", "ƒê·∫°i h·ªçc"] },
    ];

    // Create subject-level associations in the database
    for (const assoc of subjectLevelAssociations) {
      const subjectId = insertedSubjectsMap.get(assoc.subjectName);

      if (!subjectId) {
        console.warn(
          `Subject "${assoc.subjectName}" not found. Skipping associations.`
        );
        continue;
      }

      for (const levelName of assoc.levels) {
        const levelId = insertedLevelsMap.get(levelName);

        if (!levelId) {
          console.warn(
            `Education level "${levelName}" not found. Skipping association.`
          );
          continue;
        }

        try {
          // Insert subject-education level association
          await db
            .insert(schema.subjectEducationLevels)
            .values({
              subject_id: subjectId,
              level_id: levelId,
              created_at: new Date(), // Use Date object directly, not string
            })
            .onConflictDoNothing();
        } catch (error) {
          console.error(
            `Error associating subject ${assoc.subjectName} with level ${levelName}:`,
            error
          );
        }
      }
    }
    console.log("‚úÖ Database seeding completed successfully!");

    // ======= CREATE TUTOR PROFILES =======
    // Get all inserted tutors
    const allTutors = await db
      .select()
      .from(schema.users)
      .where(eq(schema.users.role, "tutor"));

    if (allTutors.length === 0) {
      console.warn("No tutors found to create profiles for");
      return;
    }

    // Define tutor profile data with realistic Vietnamese information
    const tutorProfilesData = [
      {
        // Nguy·ªÖn Thanh Minh - To√°n h·ªçc
        email: "nguyenthanhminh@gmail.com",
        bio: "T√¥i l√† gi√°o vi√™n To√°n v·ªõi 8 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y t·∫°i c√°c tr∆∞·ªùng THPT v√† trung t√¢m gia s∆∞. Chuy√™n m√¥n v·ªÅ ƒê·∫°i s·ªë, H√¨nh h·ªçc v√† Gi·∫£i t√≠ch. ƒê√£ gi√∫p h∆°n 200 h·ªçc sinh c·∫£i thi·ªán ƒëi·ªÉm s·ªë v√† ƒë·∫°t k·∫øt qu·∫£ cao trong c√°c k·ª≥ thi.",
        availability: "Th·ª© 2-6: 18:00-22:00, Th·ª© 7-CN: 8:00-20:00",
        subjects: ["To√°n h·ªçc"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // Ph·∫°m Th·ªã H∆∞∆°ng - Ti·∫øng Anh
        email: "phamthihuong@gmail.com",
        bio: "Gi·∫£ng vi√™n Ti·∫øng Anh v·ªõi 10 nƒÉm kinh nghi·ªám, c√≥ b·∫±ng IELTS 8.0 v√† ƒë√£ t·ª´ng h·ªçc t·∫≠p t·∫°i √öc. Chuy√™n luy·ªán thi IELTS, TOEFL v√† Ti·∫øng Anh giao ti·∫øp. Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y t∆∞∆°ng t√°c, sinh ƒë·ªông.",
        availability: "Th·ª© 2-7: 6:00-8:00, 19:00-22:00",
        subjects: ["Ti·∫øng Anh"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // Tr·∫ßn Th·ªã H√† - Ng·ªØ vƒÉn
        email: "tranthiha@gmail.com",
        bio: "C√¥ gi√°o Ng·ªØ vƒÉn ƒëam m√™ v·ªõi 6 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y. Chuy√™n ph√¢n t√≠ch t√°c ph·∫©m vƒÉn h·ªçc, luy·ªán vi·∫øt v√† k·ªπ nƒÉng thuy·∫øt tr√¨nh. ƒê√£ gi√∫p nhi·ªÅu h·ªçc sinh ƒë·∫°t ƒëi·ªÉm cao trong k·ª≥ thi THPT Qu·ªëc gia.",
        availability: "Th·ª© 3-7: 18:30-21:30",
        subjects: ["Ng·ªØ vƒÉn"],
        levels: ["THCS", "THPT"],
      },
      {
        // L√™ VƒÉn Trung - V·∫≠t l√Ω
        email: "levantrung@gmail.com",
        bio: "Th·∫°c sƒ© V·∫≠t l√Ω v·ªõi 12 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y t·ª´ THCS ƒë·∫øn ƒê·∫°i h·ªçc. Chuy√™n m√¥n v·ªÅ C∆° h·ªçc, ƒêi·ªán h·ªçc v√† Quang h·ªçc. C√≥ ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y ƒë·ªôc ƒë√°o k·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi th√≠ nghi·ªám th·ª±c t·∫ø.",
        availability: "Th·ª© 2-6: 19:00-22:00, CN: 14:00-18:00",
        subjects: ["V·∫≠t l√Ω"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // V≈© Th·ªã Hi·ªÅn - H√≥a h·ªçc
        email: "vuthihien@gmail.com",
        bio: "C·ª≠ nh√¢n H√≥a h·ªçc v·ªõi 7 nƒÉm kinh nghi·ªám, chuy√™n luy·ªán thi THPT v√† h·ªó tr·ª£ sinh vi√™n ƒê·∫°i h·ªçc. ƒêam m√™ th√≠ nghi·ªám h√≥a h·ªçc v√† c√≥ kh·∫£ nƒÉng gi·∫£i th√≠ch ph·ª©c t·∫°p th√†nh ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu.",
        availability: "Th·ª© 2-5: 18:00-21:00, Th·ª© 7: 9:00-17:00",
        subjects: ["H√≥a h·ªçc"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // Nguy·ªÖn VƒÉn H·∫£i - Sinh h·ªçc
        email: "nguyenvanhai@gmail.com",
        bio: "Th·∫°c sƒ© Sinh h·ªçc v·ªõi 9 nƒÉm kinh nghi·ªám, chuy√™n v·ªÅ Sinh h·ªçc ph√¢n t·ª≠ v√† Di truy·ªÅn h·ªçc. ƒê√£ h∆∞·ªõng d·∫´n nhi·ªÅu h·ªçc sinh ƒë·∫°t gi·∫£i trong c√°c k·ª≥ thi HSG Sinh h·ªçc c·∫•p t·ªânh v√† qu·ªëc gia.",
        availability: "Th·ª© 3-6: 18:30-21:30, CN: 8:00-12:00",
        subjects: ["Sinh h·ªçc"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // Ho√†ng Th·ªã Lan - L·ªãch s·ª≠
        email: "hoangthilan@gmail.com",
        bio: "C·ª≠ nh√¢n L·ªãch s·ª≠ v·ªõi 5 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y. ƒêam m√™ nghi√™n c·ª©u l·ªãch s·ª≠ Vi·ªát Nam v√† th·∫ø gi·ªõi. C√≥ kh·∫£ nƒÉng k·ªÉ chuy·ªán l·ªãch s·ª≠ m·ªôt c√°ch sinh ƒë·ªông, thu h√∫t h·ªçc sinh.",
        availability: "Th·ª© 2-4-6: 19:00-22:00, Th·ª© 7: 14:00-18:00",
        subjects: ["L·ªãch s·ª≠"],
        levels: ["THCS", "THPT"],
      },
      {
        // Tr·∫ßn VƒÉn ƒê·ª©c - ƒê·ªãa l√Ω
        email: "tranvanduc@gmail.com",
        bio: "Th·∫°c sƒ© ƒê·ªãa l√Ω v·ªõi 11 nƒÉm kinh nghi·ªám, chuy√™n v·ªÅ ƒê·ªãa l√Ω t·ª± nhi√™n v√† ƒê·ªãa l√Ω kinh t·∫ø. ƒê√£ tham gia nhi·ªÅu d·ª± √°n nghi√™n c·ª©u th·ª±c ƒë·ªãa v√† c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ ƒë·ªãa l√Ω Vi·ªát Nam v√† th·∫ø gi·ªõi.",
        availability: "Th·ª© 2-3-5: 18:00-21:00, CN: 9:00-15:00",
        subjects: ["ƒê·ªãa l√Ω"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        // Ph·∫°m Th·ªã Thanh - √Çm nh·∫°c
        email: "phamthithanh@gmail.com",
        bio: "Gi·∫£ng vi√™n √Çm nh·∫°c v·ªõi 4 nƒÉm kinh nghi·ªám, chuy√™n piano v√† thanh nh·∫°c. T·ªët nghi·ªáp Nh·∫°c vi·ªán TP.HCM, ƒë√£ tham gia nhi·ªÅu ch∆∞∆°ng tr√¨nh bi·ªÉu di·ªÖn v√† c√≥ ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y ph√π h·ª£p v·ªõi m·ªçi l·ª©a tu·ªïi.",
        availability: "Th·ª© 2-7: 14:00-20:00",
        subjects: ["√Çm nh·∫°c"],
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "NƒÉng khi·∫øu"],
      },
      {
        // ƒê·∫∑ng VƒÉn Tu·∫•n - Tin h·ªçc
        email: "dangvantuan@gmail.com",
        bio: "K·ªπ s∆∞ Ph·∫ßn m·ªÅm v·ªõi 13 nƒÉm kinh nghi·ªám trong ng√†nh IT v√† 5 nƒÉm gi·∫£ng d·∫°y. Chuy√™n v·ªÅ l·∫≠p tr√¨nh Python, Java, Web Development v√† AI. ƒê√£ ƒë√†o t·∫°o nhi·ªÅu h·ªçc sinh ƒë·∫°t gi·∫£i Olympic Tin h·ªçc.",
        availability: "Th·ª© 2-4-6: 19:00-22:00, CN: 8:00-17:00",
        subjects: ["Tin h·ªçc"],
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
    ];

    // Create tutor profiles
    for (
      let i = 0;
      i < Math.min(tutorProfilesData.length, allTutors.length);
      i++
    ) {
      const tutor = allTutors[i];
      const profileData = tutorProfilesData[i];

      try {
        // Check if profile already exists
        const [existingProfile] = await db
          .select()
          .from(schema.tutorProfiles)
          .where(eq(schema.tutorProfiles.user_id, tutor.id));

        if (existingProfile) {
          console.log(
            `Profile for tutor ${tutor.email} already exists, skipping...`
          );
          continue;
        }

        // Create the tutor profile - ch·ªâ s·ª≠ d·ª•ng c√°c tr∆∞·ªùng c√≥ trong schema
        const [insertedProfile] = await db
          .insert(schema.tutorProfiles)
          .values({
            user_id: tutor.id,
            bio: profileData.bio,
            availability: profileData.availability,
            is_verified: false,
            is_featured: false,
            rating: "0.0",
            total_reviews: 0,
            created_at: new Date(),
            updated_at: new Date(),
          })
          .returning();

        console.log(`‚úÖ Created profile for tutor: ${tutor.email}`);

        // Associate tutor with subjects and levels
        for (const subjectName of profileData.subjects) {
          const subjectId = insertedSubjectsMap.get(subjectName);

          if (subjectId) {
            // Insert into tutorSubjects table
            try {
              await db
                .insert(schema.tutorSubjects)
                .values({
                  tutor_id: insertedProfile.id,
                  subject_id: subjectId,
                  created_at: new Date(),
                })
                .onConflictDoNothing();
            } catch (error) {
              console.error(
                `Error associating tutor ${tutor.email} with subject ${subjectName}:`,
                error
              );
            }

            // Insert into tutorEducationLevels table for each level
            for (const levelName of profileData.levels) {
              const levelId = insertedLevelsMap.get(levelName);

              if (levelId) {
                try {
                  await db
                    .insert(schema.tutorEducationLevels)
                    .values({
                      tutor_id: insertedProfile.id,
                      level_id: levelId,
                      created_at: new Date(),
                    })
                    .onConflictDoNothing();
                } catch (error) {
                  console.error(
                    `Error associating tutor ${tutor.email} with level ${levelName}:`,
                    error
                  );
                }
              }
            }
          }
        }
      } catch (error) {
        console.error(
          `Error creating profile for tutor ${tutor.email}:`,
          error
        );
      }
    }

    console.log("‚úÖ Tutor profiles creation completed!");

    // ======= CREATE TEACHING REQUESTS =======
    // Get all tutor profiles that were created
    const allTutorProfiles = await db
      .select({
        id: schema.tutorProfiles.id,
        userId: schema.tutorProfiles.user_id,
      })
      .from(schema.tutorProfiles)
      .innerJoin(
        schema.users,
        eq(schema.users.id, schema.tutorProfiles.user_id)
      );

    if (allTutorProfiles.length === 0) {
      console.warn("No tutor profiles found to create teaching requests for");
      return;
    }

    // Define teaching request data for each tutor
    const teachingRequestsData = [
      {
        // Nguy·ªÖn Thanh Minh - To√°n h·ªçc
        tutorEmail: "nguyenthanhminh@gmail.com",
        requests: [
          {
            subject: "To√°n h·ªçc",
            level: "THCS",
            introduction:
              "T√¥i chuy√™n gi·∫£ng d·∫°y To√°n THCS v·ªõi ph∆∞∆°ng ph√°p d·ªÖ hi·ªÉu, gi√∫p h·ªçc sinh n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n v√† ph√°t tri·ªÉn t∆∞ duy logic. C√≥ kinh nghi·ªám 8 nƒÉm trong vi·ªác h·ªó tr·ª£ h·ªçc sinh y·∫øu k√©m tr·ªü n√™n t·ª± tin v·ªõi m√¥n To√°n.",
            experience:
              "8 nƒÉm gi·∫£ng d·∫°y To√°n THCS t·∫°i c√°c tr∆∞·ªùng c√¥ng l·∫≠p v√† trung t√¢m gia s∆∞. ƒê√£ gi√∫p h∆°n 150 h·ªçc sinh c·∫£i thi·ªán ƒëi·ªÉm s·ªë t·ª´ 3-4 l√™n 7-8 ƒëi·ªÉm. Chuy√™n m√¥n: ƒê·∫°i s·ªë c∆° b·∫£n, H√¨nh h·ªçc ph·∫≥ng, To√°n ·ª©ng d·ª•ng.",
            certifications:
              '["Ch·ª©ng ch·ªâ Gi·∫£ng vi√™n To√°n h·ªçc", "B·∫±ng C·ª≠ nh√¢n To√°n h·ªçc - ƒê·∫°i h·ªçc S∆∞ ph·∫°m TP.HCM", "Ch·ª©ng ch·ªâ Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y hi·ªán ƒë·∫°i"]',
          },
          {
            subject: "To√°n h·ªçc",
            level: "THPT",
            introduction:
              "T√¥i c√≥ nhi·ªÅu nƒÉm kinh nghi·ªám luy·ªán thi THPT Qu·ªëc gia m√¥n To√°n, ƒë·∫∑c bi·ªát m·∫°nh v·ªÅ Gi·∫£i t√≠ch v√† H√¨nh h·ªçc kh√¥ng gian. Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y t·∫≠p trung v√†o vi·ªác hi·ªÉu b·∫£n ch·∫•t b√†i to√°n v√† √°p d·ª•ng linh ho·∫°t.",
            experience:
              "5 nƒÉm chuy√™n luy·ªán thi THPT Qu·ªëc gia. H·ªçc sinh c·ªßa t√¥i th∆∞·ªùng ƒë·∫°t ƒëi·ªÉm 8-9 trong k·ª≥ thi. Chuy√™n s√¢u: H√†m s·ªë, T√≠ch ph√¢n, H√¨nh h·ªçc kh√¥ng gian, X√°c su·∫•t th·ªëng k√™.",
            certifications:
              '["Ch·ª©ng ch·ªâ Luy·ªán thi THPT Qu·ªëc gia", "B·∫±ng Th·∫°c sƒ© To√°n ·ª©ng d·ª•ng"]',
          },
        ],
      },
      {
        // Ph·∫°m Th·ªã H∆∞∆°ng - Ti·∫øng Anh
        tutorEmail: "phamthihuong@gmail.com",
        requests: [
          {
            subject: "Ti·∫øng Anh",
            level: "THCS",
            introduction:
              "T√¥i gi·∫£ng d·∫°y Ti·∫øng Anh THCS v·ªõi ph∆∞∆°ng ph√°p giao ti·∫øp t·ª± nhi√™n, gi√∫p h·ªçc sinh kh√¥ng ch·ªâ h·ªçc ƒë∆∞·ª£c ng·ªØ ph√°p m√† c√≤n t·ª± tin s·ª≠ d·ª•ng ti·∫øng Anh trong giao ti·∫øp h√†ng ng√†y.",
            experience:
              "10 nƒÉm gi·∫£ng d·∫°y Ti·∫øng Anh t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. ƒê√£ gi√∫p nhi·ªÅu h·ªçc sinh THCS ƒë·∫°t ƒëi·ªÉm cao trong c√°c k·ª≥ thi v√† t·ª± tin giao ti·∫øp b·∫±ng ti·∫øng Anh.",
            certifications:
              '["IELTS 8.0", "TESOL Certificate", "B·∫±ng Th·∫°c sƒ© Ng√¥n ng·ªØ Anh"]',
          },
          {
            subject: "Ti·∫øng Anh",
            level: "THPT",
            introduction:
              "Chuy√™n luy·ªán thi THPT v√† c√°c ch·ª©ng ch·ªâ qu·ªëc t·∫ø nh∆∞ IELTS, TOEFL. Ph∆∞∆°ng ph√°p h·ªçc k·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh, t·∫≠p trung ph√°t tri·ªÉn 4 k·ªπ nƒÉng nghe-n√≥i-ƒë·ªçc-vi·∫øt m·ªôt c√°ch c√¢n b·∫±ng.",
            experience:
              "C√≥ kinh nghi·ªám du h·ªçc t·∫°i √öc 2 nƒÉm, hi·ªÉu r√µ vƒÉn h√≥a v√† c√°ch s·ª≠ d·ª•ng ti·∫øng Anh th·ª±c t·∫ø. ƒê√£ ƒë√†o t·∫°o h∆°n 200 h·ªçc sinh ƒë·∫°t IELTS 6.5+ v√† ƒëi·ªÉm cao trong k·ª≥ thi THPT.",
            certifications:
              '["IELTS 8.0", "Cambridge CELTA", "Ch·ª©ng ch·ªâ du h·ªçc √öc"]',
          },
        ],
      },
      {
        // Tr·∫ßn Th·ªã H√† - Ng·ªØ vƒÉn
        tutorEmail: "tranthiha@gmail.com",
        requests: [
          {
            subject: "Ng·ªØ vƒÉn",
            level: "THCS",
            introduction:
              "T√¥i gi√∫p h·ªçc sinh THCS y√™u th√≠ch m√¥n VƒÉn th√¥ng qua vi·ªác ph√¢n t√≠ch t√°c ph·∫©m sinh ƒë·ªông v√† r√®n luy·ªán k·ªπ nƒÉng vi·∫øt s√°ng t·∫°o. M·ª•c ti√™u l√† ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán v√† kh·∫£ nƒÉng di·ªÖn ƒë·∫°t c·ªßa h·ªçc sinh.",
            experience:
              "6 nƒÉm gi·∫£ng d·∫°y Ng·ªØ vƒÉn THCS. C√≥ ph∆∞∆°ng ph√°p ƒë·ªôc ƒë√°o trong vi·ªác gi·∫£i th√≠ch c√°c t√°c ph·∫©m vƒÉn h·ªçc, gi√∫p h·ªçc sinh d·ªÖ d√†ng hi·ªÉu v√† nh·ªõ l√¢u.",
            certifications:
              '["B·∫±ng C·ª≠ nh√¢n Ng·ªØ vƒÉn", "Ch·ª©ng ch·ªâ Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y VƒÉn h·ªçc"]',
          },
          {
            subject: "Ng·ªØ vƒÉn",
            level: "THPT",
            introduction:
              "Chuy√™n luy·ªán thi THPT Qu·ªëc gia m√¥n VƒÉn v·ªõi tr·ªçng t√¢m l√† ph√¢n t√≠ch vƒÉn b·∫£n v√† ngh·ªã lu·∫≠n x√£ h·ªôi. Gi√∫p h·ªçc sinh n·∫Øm v·ªØng c·∫•u tr√∫c b√†i thi v√† ph√°t tri·ªÉn t∆∞ duy logic trong vi·∫øt.",
            experience:
              "ƒê√£ h∆∞·ªõng d·∫´n nhi·ªÅu h·ªçc sinh ƒë·∫°t ƒëi·ªÉm 8-9 trong k·ª≥ thi THPT. C√≥ kinh nghi·ªám bi√™n so·∫°n t√†i li·ªáu √¥n thi v√† ƒë·ªÅ thi th·ª≠.",
            certifications:
              '["Ch·ª©ng ch·ªâ Luy·ªán thi THPT Qu·ªëc gia", "Ch·ª©ng ch·ªâ Bi√™n so·∫°n gi√°o tr√¨nh"]',
          },
        ],
      },
      {
        // L√™ VƒÉn Trung - V·∫≠t l√Ω
        tutorEmail: "levantrung@gmail.com",
        requests: [
          {
            subject: "V·∫≠t l√Ω",
            level: "THCS",
            introduction:
              "T√¥i gi·∫£ng d·∫°y V·∫≠t l√Ω THCS v·ªõi nhi·ªÅu th√≠ nghi·ªám minh h·ªça, gi√∫p h·ªçc sinh hi·ªÉu b·∫£n ch·∫•t c·ªßa c√°c hi·ªán t∆∞·ª£ng v·∫≠t l√Ω thay v√¨ ch·ªâ h·ªçc thu·ªôc c√¥ng th·ª©c.",
            experience:
              "12 nƒÉm gi·∫£ng d·∫°y V·∫≠t l√Ω. C√≥ b·ªô s∆∞u t·∫≠p th√≠ nghi·ªám phong ph√∫, gi√∫p h·ªçc sinh h·ªçc V·∫≠t l√Ω m·ªôt c√°ch tr·ª±c quan v√† th√∫ v·ªã.",
            certifications:
              '["B·∫±ng Th·∫°c sƒ© V·∫≠t l√Ω", "Ch·ª©ng ch·ªâ An to√†n th√≠ nghi·ªám"]',
          },
          {
            subject: "V·∫≠t l√Ω",
            level: "THPT",
            introduction:
              "Chuy√™n s√¢u v·ªÅ C∆° h·ªçc, ƒêi·ªán h·ªçc v√† Quang h·ªçc. Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y k·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi b√†i t·∫≠p th·ª±c h√†nh, gi√∫p h·ªçc sinh n·∫Øm v·ªØng ki·∫øn th·ª©c v√† t·ª± tin l√†m b√†i thi.",
            experience:
              "C√≥ kinh nghi·ªám nghi√™n c·ª©u khoa h·ªçc t·∫°i tr∆∞·ªùng ƒê·∫°i h·ªçc. ƒê√£ xu·∫•t b·∫£n nhi·ªÅu b√†i b√°o khoa h·ªçc v√† c√≥ ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y hi·ªáu qu·∫£.",
            certifications:
              '["B·∫±ng Ti·∫øn sƒ© V·∫≠t l√Ω", "Ch·ª©ng ch·ªâ Nghi√™n c·ª©u khoa h·ªçc"]',
          },
        ],
      },
      {
        // V≈© Th·ªã Hi·ªÅn - H√≥a h·ªçc
        tutorEmail: "vuthihien@gmail.com",
        requests: [
          {
            subject: "H√≥a h·ªçc",
            level: "THCS",
            introduction:
              "T√¥i gi√∫p h·ªçc sinh THCS l√†m quen v·ªõi H√≥a h·ªçc qua c√°c th√≠ nghi·ªám ƒë∆°n gi·∫£n v√† an to√†n. M·ª•c ti√™u l√† t·∫°o h·ª©ng th√∫ h·ªçc t·∫≠p v√† hi·ªÉu ƒë∆∞·ª£c ·ª©ng d·ª•ng c·ªßa H√≥a h·ªçc trong ƒë·ªùi s·ªëng.",
            experience:
              "7 nƒÉm gi·∫£ng d·∫°y v·ªõi nhi·ªÅu th√≠ nghi·ªám th√∫ v·ªã. H·ªçc sinh c·ªßa t√¥i th∆∞·ªùng r·∫•t h√†o h·ª©ng v·ªõi m√¥n H√≥a v√† hi·ªÉu s√¢u v·ªÅ b·∫£n ch·∫•t c√°c ph·∫£n ·ª©ng.",
            certifications:
              '["B·∫±ng C·ª≠ nh√¢n H√≥a h·ªçc", "Ch·ª©ng ch·ªâ An to√†n h√≥a ch·∫•t"]',
          },
          {
            subject: "H√≥a h·ªçc",
            level: "THPT",
            introduction:
              "Chuy√™n luy·ªán thi THPT v√† h·ªó tr·ª£ h·ªçc sinh √¥n thi ƒê·∫°i h·ªçc. M·∫°nh v·ªÅ H√≥a v√¥ c∆° v√† H√≥a h·ªØu c∆°, c√≥ kh·∫£ nƒÉng gi·∫£i th√≠ch c√°c b√†i t·∫≠p kh√≥ m·ªôt c√°ch d·ªÖ hi·ªÉu.",
            experience:
              "C√≥ kinh nghi·ªám l√†m vi·ªác t·∫°i ph√≤ng th√≠ nghi·ªám chuy√™n nghi·ªáp, hi·ªÉu r√µ v·ªÅ ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa H√≥a h·ªçc.",
            certifications:
              '["B·∫±ng Th·∫°c sƒ© H√≥a h·ªçc", "Ch·ª©ng ch·ªâ Ph√¢n t√≠ch h√≥a h·ªçc"]',
          },
        ],
      },
      {
        // Nguy·ªÖn VƒÉn H·∫£i - Sinh h·ªçc
        tutorEmail: "nguyenvanhai@gmail.com",
        requests: [
          {
            subject: "Sinh h·ªçc",
            level: "THPT",
            introduction:
              "T√¥i chuy√™n gi·∫£ng d·∫°y Sinh h·ªçc THPT v·ªõi tr·ªçng t√¢m l√† Sinh h·ªçc ph√¢n t·ª≠ v√† Di truy·ªÅn h·ªçc. C√≥ kh·∫£ nƒÉng gi·∫£i th√≠ch c√°c qu√° tr√¨nh sinh h·ªçc ph·ª©c t·∫°p m·ªôt c√°ch d·ªÖ hi·ªÉu.",
            experience:
              "9 nƒÉm nghi√™n c·ª©u v√† gi·∫£ng d·∫°y Sinh h·ªçc. ƒê√£ h∆∞·ªõng d·∫´n nhi·ªÅu h·ªçc sinh ƒë·∫°t gi·∫£i cao trong c√°c k·ª≥ thi HSG v√† Olympic Sinh h·ªçc.",
            certifications:
              '["B·∫±ng Th·∫°c sƒ© Sinh h·ªçc", "Ch·ª©ng ch·ªâ Nghi√™n c·ª©u Di truy·ªÅn h·ªçc"]',
          },
          {
            subject: "Sinh h·ªçc",
            level: "ƒê·∫°i h·ªçc",
            introduction:
              "Chuy√™n s√¢u v·ªÅ Sinh h·ªçc ph√¢n t·ª≠ v√† C√¥ng ngh·ªá sinh h·ªçc. Gi√∫p sinh vi√™n n·∫Øm v·ªØng ki·∫øn th·ª©c chuy√™n ng√†nh v√† ƒë·ªãnh h∆∞·ªõng nghi√™n c·ª©u khoa h·ªçc.",
            experience:
              "C√≥ nhi·ªÅu c√¥ng tr√¨nh nghi√™n c·ª©u ƒë∆∞·ª£c c√¥ng b·ªë tr√™n c√°c t·∫°p ch√≠ khoa h·ªçc qu·ªëc t·∫ø. Kinh nghi·ªám h∆∞·ªõng d·∫´n sinh vi√™n l√†m lu·∫≠n vƒÉn t·ªët nghi·ªáp.",
            certifications:
              '["B·∫±ng Ti·∫øn sƒ© Sinh h·ªçc", "Ch·ª©ng ch·ªâ C√¥ng ngh·ªá sinh h·ªçc"]',
          },
        ],
      },
      {
        // Ho√†ng Th·ªã Lan - L·ªãch s·ª≠
        tutorEmail: "hoangthilan@gmail.com",
        requests: [
          {
            subject: "L·ªãch s·ª≠",
            level: "THCS",
            introduction:
              "T√¥i gi·∫£ng d·∫°y L·ªãch s·ª≠ THCS v·ªõi ph∆∞∆°ng ph√°p k·ªÉ chuy·ªán sinh ƒë·ªông, gi√∫p h·ªçc sinh d·ªÖ d√†ng ghi nh·ªõ c√°c s·ª± ki·ªán l·ªãch s·ª≠ v√† hi·ªÉu ƒë∆∞·ª£c √Ω nghƒ©a c·ªßa ch√∫ng.",
            experience:
              "5 nƒÉm gi·∫£ng d·∫°y v·ªõi phong c√°ch truy·ªÅn ƒë·∫°t h·∫•p d·∫´n. H·ªçc sinh th∆∞·ªùng r·∫•t th√≠ch th√∫ v·ªõi c√°c c√¢u chuy·ªán l·ªãch s·ª≠ v√† nh·ªõ l√¢u ki·∫øn th·ª©c.",
            certifications:
              '["B·∫±ng C·ª≠ nh√¢n L·ªãch s·ª≠", "Ch·ª©ng ch·ªâ H∆∞·ªõng d·∫´n vi√™n du l·ªãch"]',
          },
          {
            subject: "L·ªãch s·ª≠",
            level: "THPT",
            introduction:
              "Chuy√™n luy·ªán thi THPT m√¥n L·ªãch s·ª≠ v·ªõi tr·ªçng t√¢m l√† l·ªãch s·ª≠ Vi·ªát Nam v√† th·∫ø gi·ªõi hi·ªán ƒë·∫°i. C√≥ ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£ gi√∫p h·ªçc sinh nh·ªõ nƒÉm th√°ng v√† s·ª± ki·ªán.",
            experience:
              "C√≥ kinh nghi·ªám tham gia c√°c ƒëo√†n kh·∫£o s√°t di t√≠ch l·ªãch s·ª≠, hi·ªÉu s√¢u v·ªÅ vƒÉn h√≥a v√† truy·ªÅn th·ªëng Vi·ªát Nam.",
            certifications:
              '["Ch·ª©ng ch·ªâ Nghi√™n c·ª©u L·ªãch s·ª≠ Vi·ªát Nam", "Ch·ª©ng ch·ªâ B·∫£o t·ªìn di s·∫£n"]',
          },
        ],
      },
      {
        // Tr·∫ßn VƒÉn ƒê·ª©c - ƒê·ªãa l√Ω
        tutorEmail: "tranvanduc@gmail.com",
        requests: [
          {
            subject: "ƒê·ªãa l√Ω",
            level: "THCS",
            introduction:
              "T√¥i gi·∫£ng d·∫°y ƒê·ªãa l√Ω THCS v·ªõi nhi·ªÅu h√¨nh ·∫£nh v√† b·∫£n ƒë·ªì tr·ª±c quan, gi√∫p h·ªçc sinh hi·ªÉu v·ªÅ c√°c v√πng mi·ªÅn v√† hi·ªán t∆∞·ª£ng ƒë·ªãa l√Ω m·ªôt c√°ch sinh ƒë·ªông.",
            experience:
              "11 nƒÉm gi·∫£ng d·∫°y v·ªõi b·ªô s∆∞u t·∫≠p b·∫£n ƒë·ªì v√† h√¨nh ·∫£nh phong ph√∫. Th∆∞·ªùng t·ªï ch·ª©c c√°c chuy·∫øn tham quan th·ª±c ƒë·ªãa cho h·ªçc sinh.",
            certifications: '["B·∫±ng Th·∫°c sƒ© ƒê·ªãa l√Ω", "Ch·ª©ng ch·ªâ GIS"]',
          },
          {
            subject: "ƒê·ªãa l√Ω",
            level: "THPT",
            introduction:
              "Chuy√™n s√¢u v·ªÅ ƒê·ªãa l√Ω t·ª± nhi√™n v√† ƒê·ªãa l√Ω kinh t·∫ø. C√≥ kinh nghi·ªám nghi√™n c·ª©u th·ª±c ƒë·ªãa v√† ·ª©ng d·ª•ng c√¥ng ngh·ªá GIS trong gi·∫£ng d·∫°y.",
            experience:
              "ƒê√£ tham gia nhi·ªÅu d·ª± √°n nghi√™n c·ª©u ƒë·ªãa l√Ω ·ª©ng d·ª•ng. C√≥ kh·∫£ nƒÉng k·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi th·ª±c ti·ªÖn m·ªôt c√°ch hi·ªáu qu·∫£.",
            certifications:
              '["B·∫±ng Ti·∫øn sƒ© ƒê·ªãa l√Ω", "Ch·ª©ng ch·ªâ Nghi√™n c·ª©u th·ª±c ƒë·ªãa"]',
          },
        ],
      },
      {
        // Ph·∫°m Th·ªã Thanh - √Çm nh·∫°c
        tutorEmail: "phamthithanh@gmail.com",
        requests: [
          {
            subject: "√Çm nh·∫°c",
            level: "Ti·ªÉu h·ªçc",
            introduction:
              "T√¥i gi·∫£ng d·∫°y √Çm nh·∫°c cho tr·∫ª em v·ªõi ph∆∞∆°ng ph√°p vui nh·ªôn v√† d·ªÖ ti·∫øp c·∫≠n. Gi√∫p c√°c em l√†m quen v·ªõi √¢m nh·∫°c qua c√°c tr√≤ ch∆°i v√† b√†i h√°t thi·∫øu nhi.",
            experience:
              "4 nƒÉm gi·∫£ng d·∫°y √¢m nh·∫°c cho tr·∫ª em. C√≥ ph∆∞∆°ng ph√°p ƒë·ªôc ƒë√°o gi√∫p tr·∫ª ph√°t tri·ªÉn khi·∫øu √¢m nh·∫°c m·ªôt c√°ch t·ª± nhi√™n.",
            certifications:
              '["B·∫±ng C·ª≠ nh√¢n √Çm nh·∫°c", "Ch·ª©ng ch·ªâ Gi·∫£ng d·∫°y tr·∫ª em"]',
          },
          {
            subject: "√Çm nh·∫°c",
            level: "NƒÉng khi·∫øu",
            introduction:
              "Chuy√™n ƒë√†o t·∫°o piano v√† thanh nh·∫°c cho h·ªçc vi√™n c√≥ nƒÉng khi·∫øu. Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y chuy√™n nghi·ªáp, gi√∫p h·ªçc vi√™n ph√°t tri·ªÉn k·ªπ thu·∫≠t v√† c·∫£m x√∫c √¢m nh·∫°c.",
            experience:
              "T·ªët nghi·ªáp Nh·∫°c vi·ªán TP.HCM v·ªõi th√†nh t√≠ch xu·∫•t s·∫Øc. ƒê√£ bi·ªÉu di·ªÖn t·∫°i nhi·ªÅu ch∆∞∆°ng tr√¨nh ngh·ªá thu·∫≠t chuy√™n nghi·ªáp.",
            certifications:
              '["B·∫±ng Xu·∫•t s·∫Øc Nh·∫°c vi·ªán TP.HCM", "Ch·ª©ng ch·ªâ Piano c·∫•p 8", "Ch·ª©ng ch·ªâ Thanh nh·∫°c c·ªï ƒëi·ªÉn"]',
          },
        ],
      },
      {
        // ƒê·∫∑ng VƒÉn Tu·∫•n - Tin h·ªçc
        tutorEmail: "dangvantuan@gmail.com",
        requests: [
          {
            subject: "Tin h·ªçc",
            level: "THCS",
            introduction:
              "T√¥i gi·∫£ng d·∫°y Tin h·ªçc c∆° b·∫£n cho h·ªçc sinh THCS, t·ª´ l√†m quen v·ªõi m√°y t√≠nh ƒë·∫øn l·∫≠p tr√¨nh Scratch v√† Python ƒë∆°n gi·∫£n. M·ª•c ti√™u l√† t·∫°o h·ª©ng th√∫ v√† n·ªÅn t·∫£ng cho t∆∞∆°ng lai.",
            experience:
              "13 nƒÉm trong ng√†nh IT v√† 5 nƒÉm gi·∫£ng d·∫°y. C√≥ kh·∫£ nƒÉng truy·ªÅn ƒë·∫°t ki·∫øn th·ª©c k·ªπ thu·∫≠t m·ªôt c√°ch d·ªÖ hi·ªÉu cho h·ªçc sinh.",
            certifications:
              '["B·∫±ng K·ªπ s∆∞ Khoa h·ªçc M√°y t√≠nh", "Ch·ª©ng ch·ªâ Gi·∫£ng d·∫°y Tin h·ªçc"]',
          },
          {
            subject: "Tin h·ªçc",
            level: "THPT",
            introduction:
              "Chuy√™n luy·ªán thi Olympic Tin h·ªçc v√† d·∫°y l·∫≠p tr√¨nh n√¢ng cao. Gi√∫p h·ªçc sinh n·∫Øm v·ªØng c√°c thu·∫≠t to√°n v√† c·∫•u tr√∫c d·ªØ li·ªáu, chu·∫©n b·ªã t·ªët cho c√°c k·ª≥ thi v√† t∆∞∆°ng lai h·ªçc ƒë·∫°i h·ªçc.",
            experience:
              "ƒê√£ ƒë√†o t·∫°o nhi·ªÅu h·ªçc sinh ƒë·∫°t gi·∫£i cao trong Olympic Tin h·ªçc qu·ªëc gia. C√≥ kinh nghi·ªám th·ª±c t·∫ø trong ph√°t tri·ªÉn ph·∫ßn m·ªÅm.",
            certifications:
              '["AWS Certified Developer", "Oracle Java Certified", "Ch·ª©ng ch·ªâ Hu·∫•n luy·ªán Olympic Tin h·ªçc"]',
          },
        ],
      },
    ];

    // Create teaching requests for each tutor
    for (const tutorData of teachingRequestsData) {
      // Find the tutor profile by email
      const tutorUser = await db
        .select({
          tutorProfileId: schema.tutorProfiles.id,
          email: schema.users.email,
        })
        .from(schema.tutorProfiles)
        .innerJoin(
          schema.users,
          eq(schema.users.id, schema.tutorProfiles.user_id)
        )
        .where(eq(schema.users.email, tutorData.tutorEmail))
        .limit(1);

      if (tutorUser.length === 0) {
        console.warn(`Tutor with email ${tutorData.tutorEmail} not found`);
        continue;
      }

      const tutorProfileId = tutorUser[0].tutorProfileId;

      // Create requests for this tutor
      for (const requestData of tutorData.requests) {
        try {
          // Get subject and level IDs
          const subjectId = insertedSubjectsMap.get(requestData.subject);
          const levelId = insertedLevelsMap.get(requestData.level);

          if (!subjectId || !levelId) {
            console.warn(
              `Subject "${requestData.subject}" or level "${requestData.level}" not found for tutor ${tutorData.tutorEmail}`
            );
            continue;
          }

          // Check if teaching request already exists
          const [existingRequest] = await db
            .select()
            .from(schema.teachingRequests)
            .where(
              sql`${schema.teachingRequests.tutor_id} = ${tutorProfileId} 
                  AND ${schema.teachingRequests.subject_id} = ${subjectId} 
                  AND ${schema.teachingRequests.level_id} = ${levelId}`
            );

          if (existingRequest) {
            console.log(
              `Teaching request for ${tutorData.tutorEmail} - ${requestData.subject} (${requestData.level}) already exists, skipping...`
            );
            continue;
          }

          // Create the teaching request
          await db.insert(schema.teachingRequests).values({
            tutor_id: tutorProfileId,
            subject_id: subjectId,
            level_id: levelId,
            introduction: requestData.introduction,
            experience: requestData.experience,
            certifications: requestData.certifications,
            status: "approved", // Auto-approve for seed data
            approved_by: null, // Could be set to an admin user ID if available
            created_at: new Date(),
            updated_at: new Date(),
          });

          console.log(
            `‚úÖ Created teaching request for ${tutorData.tutorEmail} - ${requestData.subject} (${requestData.level})`
          );
        } catch (error) {
          console.error(
            `Error creating teaching request for ${tutorData.tutorEmail} - ${requestData.subject}:`,
            error
          );
        }
      }
    }
    console.log("‚úÖ Teaching requests creation completed!");

    // ======= CREATE COURSES =======
    console.log("üéì Creating courses for tutors...");

    // Define comprehensive course data for each tutor
    const coursesData = [
      {
        // Nguy·ªÖn Thanh Minh - To√°n h·ªçc
        tutorEmail: "nguyenthanhminh@gmail.com",
        courses: [
          {
            subject: "To√°n h·ªçc",
            level: "THCS",
            title: "To√°n THCS - N·ªÅn t·∫£ng v·ªØng ch·∫Øc cho t∆∞∆°ng lai",
            description:
              "Kh√≥a h·ªçc To√°n THCS to√†n di·ªán gi√∫p h·ªçc sinh n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n v√† ph√°t tri·ªÉn t∆∞ duy logic. Ch∆∞∆°ng tr√¨nh bao g·ªìm: ƒê·∫°i s·ªë c∆° b·∫£n, H√¨nh h·ªçc ph·∫≥ng, S·ªë h·ªçc v√† c√°c b√†i t·∫≠p ·ª©ng d·ª•ng th·ª±c t·∫ø. Ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y d·ªÖ hi·ªÉu, t·ª´ng b∆∞·ªõc m·ªôt, gi√∫p h·ªçc sinh t·ª± tin v·ªõi m√¥n To√°n.",
            hourly_rate: "180000.00",
            teaching_mode: "both",
          },
          {
            subject: "To√°n h·ªçc",
            level: "THPT",
            title: "To√°n THPT - Chinh ph·ª•c k·ª≥ thi THPT Qu·ªëc gia",
            description:
              "Kh√≥a h·ªçc luy·ªán thi THPT Qu·ªëc gia m√¥n To√°n v·ªõi ch∆∞∆°ng tr√¨nh chuy√™n s√¢u. T·∫≠p trung v√†o: H√†m s·ªë v√† ƒë·ªì th·ªã, T√≠ch ph√¢n v√† ·ª©ng d·ª•ng, H√¨nh h·ªçc kh√¥ng gian, X√°c su·∫•t th·ªëng k√™. ƒê∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho h·ªçc sinh mu·ªën ƒë·∫°t ƒëi·ªÉm cao 8-10 trong k·ª≥ thi.",
            hourly_rate: "250000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // Ph·∫°m Th·ªã H∆∞∆°ng - Ti·∫øng Anh
        tutorEmail: "phamthihuong@gmail.com",
        courses: [
          {
            subject: "Ti·∫øng Anh",
            level: "THCS",
            title: "Ti·∫øng Anh THCS - Giao ti·∫øp t·ª± nhi√™n v√† t·ª± tin",
            description:
              "Kh√≥a h·ªçc Ti·∫øng Anh THCS t·∫≠p trung ph√°t tri·ªÉn 4 k·ªπ nƒÉng nghe-n√≥i-ƒë·ªçc-vi·∫øt m·ªôt c√°ch c√¢n b·∫±ng. Ch∆∞∆°ng tr√¨nh bao g·ªìm: Ng·ªØ ph√°p c∆° b·∫£n, T·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ, Giao ti·∫øp h√†ng ng√†y, Luy·ªán ph√°t √¢m chu·∫©n. Ph∆∞∆°ng ph√°p h·ªçc qua tr√≤ ch∆°i v√† ho·∫°t ƒë·ªông t∆∞∆°ng t√°c.",
            hourly_rate: "160000.00",
            teaching_mode: "both",
          },
          {
            subject: "Ti·∫øng Anh",
            level: "THPT",
            title: "Ti·∫øng Anh THPT & IELTS - ƒê·∫°t m·ª•c ti√™u qu·ªëc t·∫ø",
            description:
              "Kh√≥a h·ªçc k·∫øt h·ª£p luy·ªán thi THPT v√† chu·∫©n b·ªã IELTS. N·ªôi dung: Ng·ªØ ph√°p n√¢ng cao, T·ª´ v·ª±ng academic, Writing Task 1&2, Speaking t·ª± nhi√™n, Reading comprehension. M·ª•c ti√™u: ƒêi·ªÉm cao THPT + IELTS 6.5-8.0. C√≥ kinh nghi·ªám du h·ªçc √öc.",
            hourly_rate: "220000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // Tr·∫ßn Th·ªã H√† - Ng·ªØ vƒÉn
        tutorEmail: "tranthiha@gmail.com",
        courses: [
          {
            subject: "Ng·ªØ vƒÉn",
            level: "THCS",
            title: "Ng·ªØ vƒÉn THCS - Y√™u th√≠ch vƒÉn h·ªçc Vi·ªát Nam",
            description:
              "Kh√≥a h·ªçc Ng·ªØ vƒÉn THCS gi√∫p h·ªçc sinh hi·ªÉu s√¢u c√°c t√°c ph·∫©m vƒÉn h·ªçc qua ph√¢n t√≠ch sinh ƒë·ªông. Ch∆∞∆°ng tr√¨nh: VƒÉn h·ªçc d√¢n gian, Th∆° ca c·ªï ƒëi·ªÉn, Truy·ªán ng·∫Øn hi·ªán ƒë·∫°i, K·ªπ nƒÉng vi·∫øt vƒÉn mi√™u t·∫£ v√† t·ª± s·ª±. Ph√°t tri·ªÉn t∆∞ duy s√°ng t·∫°o v√† kh·∫£ nƒÉng di·ªÖn ƒë·∫°t.",
            hourly_rate: "150000.00",
            teaching_mode: "both",
          },
          {
            subject: "Ng·ªØ vƒÉn",
            level: "THPT",
            title: "Ng·ªØ vƒÉn THPT - Luy·ªán thi v·ªõi ph∆∞∆°ng ph√°p hi·ªáu qu·∫£",
            description:
              "Kh√≥a h·ªçc luy·ªán thi THPT Qu·ªëc gia m√¥n VƒÉn v·ªõi tr·ªçng t√¢m ph√¢n t√≠ch vƒÉn b·∫£n v√† ngh·ªã lu·∫≠n x√£ h·ªôi. N·ªôi dung: K·ªπ thu·∫≠t ph√¢n t√≠ch t√°c ph·∫©m, C·∫•u tr√∫c b√†i ngh·ªã lu·∫≠n, L·∫≠p lu·∫≠n logic, Phong c√°ch vi·∫øt ·∫•n t∆∞·ª£ng. M·ª•c ti√™u ƒë·∫°t ƒëi·ªÉm 8-9 trong k·ª≥ thi.",
            hourly_rate: "200000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // L√™ VƒÉn Trung - V·∫≠t l√Ω
        tutorEmail: "levantrung@gmail.com",
        courses: [
          {
            subject: "V·∫≠t l√Ω",
            level: "THCS",
            title: "V·∫≠t l√Ω THCS - Kh√°m ph√° th·∫ø gi·ªõi qua th√≠ nghi·ªám",
            description:
              "Kh√≥a h·ªçc V·∫≠t l√Ω THCS v·ªõi nhi·ªÅu th√≠ nghi·ªám th√∫ v·ªã gi√∫p h·ªçc sinh hi·ªÉu b·∫£n ch·∫•t c√°c hi·ªán t∆∞·ª£ng. Ch∆∞∆°ng tr√¨nh: C∆° h·ªçc c∆° b·∫£n, Nhi·ªát h·ªçc, ƒêi·ªán h·ªçc ƒë∆°n gi·∫£n, Quang h·ªçc. H·ªçc qua th·ª±c h√†nh v√† quan s√°t, kh√¥ng ch·ªâ h·ªçc thu·ªôc c√¥ng th·ª©c.",
            hourly_rate: "170000.00",
            teaching_mode: "both",
          },
          {
            subject: "V·∫≠t l√Ω",
            level: "THPT",
            title: "V·∫≠t l√Ω THPT - Chinh ph·ª•c c√°c b√†i t·∫≠p kh√≥",
            description:
              "Kh√≥a h·ªçc V·∫≠t l√Ω THPT chuy√™n s√¢u v·ªõi gi·∫£ng vi√™n c√≥ b·∫±ng Ti·∫øn sƒ©. N·ªôi dung: C∆° h·ªçc n√¢ng cao, ƒêi·ªán t·ª´ h·ªçc, Dao ƒë·ªông s√≥ng, V·∫≠t l√Ω hi·ªán ƒë·∫°i. K·∫øt h·ª£p l√Ω thuy·∫øt v·ªõi b√†i t·∫≠p t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. C√≥ kinh nghi·ªám nghi√™n c·ª©u khoa h·ªçc.",
            hourly_rate: "280000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // V≈© Th·ªã Hi·ªÅn - H√≥a h·ªçc
        tutorEmail: "vuthihien@gmail.com",
        courses: [
          {
            subject: "H√≥a h·ªçc",
            level: "THCS",
            title: "H√≥a h·ªçc THCS - Th√≠ nghi·ªám an to√†n v√† th√∫ v·ªã",
            description:
              "Kh√≥a h·ªçc H√≥a h·ªçc THCS gi√∫p h·ªçc sinh l√†m quen v·ªõi m√¥n h·ªçc qua c√°c th√≠ nghi·ªám ƒë∆°n gi·∫£n. Ch∆∞∆°ng tr√¨nh: Nguy√™n t·ª≠ v√† ph√¢n t·ª≠, Ph·∫£n ·ª©ng h√≥a h·ªçc c∆° b·∫£n, H√≥a h·ªçc trong ƒë·ªùi s·ªëng. T·∫°o h·ª©ng th√∫ h·ªçc t·∫≠p v√† hi·ªÉu ·ª©ng d·ª•ng th·ª±c t·∫ø.",
            hourly_rate: "155000.00",
            teaching_mode: "both",
          },
          {
            subject: "H√≥a h·ªçc",
            level: "THPT",
            title: "H√≥a h·ªçc THPT - H√≥a v√¥ c∆° v√† h·ªØu c∆° chuy√™n s√¢u",
            description:
              "Kh√≥a h·ªçc H√≥a h·ªçc THPT to√†n di·ªán cho k·ª≥ thi THPT v√† tuy·ªÉn sinh ƒê·∫°i h·ªçc. N·ªôi dung: H√≥a v√¥ c∆° h·ªá th·ªëng, H√≥a h·ªØu c∆° ·ª©ng d·ª•ng, Ph∆∞∆°ng ph√°p gi·∫£i b√†i t·∫≠p, Th√≠ nghi·ªám minh h·ªça. C√≥ kinh nghi·ªám ph√≤ng th√≠ nghi·ªám chuy√™n nghi·ªáp.",
            hourly_rate: "240000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // Nguy·ªÖn VƒÉn H·∫£i - Sinh h·ªçc
        tutorEmail: "nguyenvanhai@gmail.com",
        courses: [
          {
            subject: "Sinh h·ªçc",
            level: "THPT",
            title: "Sinh h·ªçc THPT - Di truy·ªÅn v√† Sinh h·ªçc ph√¢n t·ª≠",
            description:
              "Kh√≥a h·ªçc Sinh h·ªçc THPT chuy√™n s√¢u v·ªõi tr·ªçng t√¢m Di truy·ªÅn h·ªçc v√† Sinh h·ªçc ph√¢n t·ª≠. N·ªôi dung: C∆° ch·∫ø di truy·ªÅn, C√¥ng ngh·ªá gen, Ti·∫øn h√≥a, Sinh th√°i h·ªçc. Gi·∫£ng vi√™n c√≥ b·∫±ng Th·∫°c sƒ© v√† nhi·ªÅu nƒÉm nghi√™n c·ª©u. Chu·∫©n b·ªã t·ªët cho thi ƒê·∫°i h·ªçc.",
            hourly_rate: "260000.00",
            teaching_mode: "both",
          },
          {
            subject: "Sinh h·ªçc",
            level: "ƒê·∫°i h·ªçc",
            title: "Sinh h·ªçc ƒê·∫°i h·ªçc - Nghi√™n c·ª©u v√† ·ª®ng d·ª•ng",
            description:
              "Kh√≥a h·ªçc Sinh h·ªçc c·∫•p ƒê·∫°i h·ªçc cho sinh vi√™n chuy√™n ng√†nh. N·ªôi dung: Sinh h·ªçc ph√¢n t·ª≠ n√¢ng cao, C√¥ng ngh·ªá sinh h·ªçc, Ph∆∞∆°ng ph√°p nghi√™n c·ª©u, H∆∞·ªõng d·∫´n lu·∫≠n vƒÉn. Gi·∫£ng vi√™n Ti·∫øn sƒ© v·ªõi nhi·ªÅu c√¥ng tr√¨nh khoa h·ªçc qu·ªëc t·∫ø.",
            hourly_rate: "350000.00",
            teaching_mode: "online",
          },
        ],
      },
      {
        // Ho√†ng Th·ªã Lan - L·ªãch s·ª≠
        tutorEmail: "hoangthilan@gmail.com",
        courses: [
          {
            subject: "L·ªãch s·ª≠",
            level: "THCS",
            title: "L·ªãch s·ª≠ THCS - C√¢u chuy·ªán d√¢n t·ªôc qua c√°c th·ªùi k·ª≥",
            description:
              "Kh√≥a h·ªçc L·ªãch s·ª≠ THCS v·ªõi ph∆∞∆°ng ph√°p k·ªÉ chuy·ªán sinh ƒë·ªông. Ch∆∞∆°ng tr√¨nh: L·ªãch s·ª≠ Vi·ªát Nam qua c√°c th·ªùi k·ª≥, VƒÉn h√≥a truy·ªÅn th·ªëng, C√°c anh h√πng d√¢n t·ªôc, B√†i h·ªçc t·ª´ l·ªãch s·ª≠. Gi√∫p h·ªçc sinh y√™u th√≠ch v√† ghi nh·ªõ l√¢u.",
            hourly_rate: "140000.00",
            teaching_mode: "both",
          },
          {
            subject: "L·ªãch s·ª≠",
            level: "THPT",
            title: "L·ªãch s·ª≠ THPT - L·ªãch s·ª≠ Vi·ªát Nam v√† th·∫ø gi·ªõi hi·ªán ƒë·∫°i",
            description:
              "Kh√≥a h·ªçc luy·ªán thi THPT m√¥n L·ªãch s·ª≠ v·ªõi tr·ªçng t√¢m l·ªãch s·ª≠ hi·ªán ƒë·∫°i. N·ªôi dung: C√°ch m·∫°ng th√°ng T√°m, Kh√°ng chi·∫øn ch·ªëng Ph√°p-M·ªπ, ƒê·ªïi m·ªõi v√† h·ªôi nh·∫≠p, L·ªãch s·ª≠ th·∫ø gi·ªõi. C√≥ kinh nghi·ªám th·ª±c ƒë·ªãa t·∫°i di t√≠ch l·ªãch s·ª≠.",
            hourly_rate: "190000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // Tr·∫ßn VƒÉn ƒê·ª©c - ƒê·ªãa l√Ω
        tutorEmail: "tranvanduc@gmail.com",
        courses: [
          {
            subject: "ƒê·ªãa l√Ω",
            level: "THCS",
            title: "ƒê·ªãa l√Ω THCS - Kh√°m ph√° th·∫ø gi·ªõi qua b·∫£n ƒë·ªì",
            description:
              "Kh√≥a h·ªçc ƒê·ªãa l√Ω THCS v·ªõi nhi·ªÅu h√¨nh ·∫£nh v√† b·∫£n ƒë·ªì tr·ª±c quan. Ch∆∞∆°ng tr√¨nh: ƒê·ªãa l√Ω t·ª± nhi√™n Vi·ªát Nam, C√°c v√πng mi·ªÅn, Kh√≠ h·∫≠u v√† th·ªùi ti·∫øt, T√†i nguy√™n thi√™n nhi√™n. Th∆∞·ªùng c√≥ chuy·∫øn tham quan th·ª±c ƒë·ªãa ƒë·ªÉ h·ªçc sinh tr·∫£i nghi·ªám.",
            hourly_rate: "145000.00",
            teaching_mode: "both",
          },
          {
            subject: "ƒê·ªãa l√Ω",
            level: "THPT",
            title: "ƒê·ªãa l√Ω THPT - ƒê·ªãa l√Ω t·ª± nhi√™n v√† kinh t·∫ø",
            description:
              "Kh√≥a h·ªçc ƒê·ªãa l√Ω THPT chuy√™n s√¢u v·ªõi ·ª©ng d·ª•ng c√¥ng ngh·ªá GIS. N·ªôi dung: ƒê·ªãa l√Ω t·ª± nhi√™n h·ªá th·ªëng, ƒê·ªãa l√Ω kinh t·∫ø - x√£ h·ªôi, Ph√¢n t√≠ch b·∫£n ƒë·ªì, Nghi√™n c·ª©u th·ª±c ƒë·ªãa. Gi·∫£ng vi√™n Ti·∫øn sƒ© v·ªõi nhi·ªÅu d·ª± √°n nghi√™n c·ª©u th·ª±c t·∫ø.",
            hourly_rate: "230000.00",
            teaching_mode: "both",
          },
        ],
      },
      {
        // Ph·∫°m Th·ªã Thanh - √Çm nh·∫°c
        tutorEmail: "phamthithanh@gmail.com",
        courses: [
          {
            subject: "√Çm nh·∫°c",
            level: "Ti·ªÉu h·ªçc",
            title: "√Çm nh·∫°c thi·∫øu nhi - √Çm nh·∫°c vui nh·ªôn cho b√©",
            description:
              "Kh√≥a h·ªçc √Çm nh·∫°c cho tr·∫ª em v·ªõi ph∆∞∆°ng ph√°p vui nh·ªôn v√† d·ªÖ ti·∫øp c·∫≠n. Ch∆∞∆°ng tr√¨nh: L√†m quen v·ªõi nh·∫°c c·ª•, H√°t c√°c b√†i h√°t thi·∫øu nhi, Nh·ªãp ƒëi·ªáu v√† giai ƒëi·ªáu c∆° b·∫£n, Tr√≤ ch∆°i √¢m nh·∫°c. Ph√°t tri·ªÉn khi·∫øu √¢m nh·∫°c t·ª± nhi√™n cho tr·∫ª.",
            hourly_rate: "120000.00",
            teaching_mode: "both",
          },
          {
            subject: "√Çm nh·∫°c",
            level: "NƒÉng khi·∫øu",
            title: "Piano & Thanh nh·∫°c chuy√™n nghi·ªáp",
            description:
              "Kh√≥a h·ªçc ƒë√†o t·∫°o Piano v√† Thanh nh·∫°c cho h·ªçc vi√™n c√≥ nƒÉng khi·∫øu. Ch∆∞∆°ng tr√¨nh: K·ªπ thu·∫≠t piano n√¢ng cao, Thanh nh·∫°c c·ªï ƒëi·ªÉn, Bi·ªÉu di·ªÖn v√† c·∫£m x√∫c, Chu·∫©n b·ªã thi c·∫•p. Gi·∫£ng vi√™n t·ªët nghi·ªáp xu·∫•t s·∫Øc Nh·∫°c vi·ªán TP.HCM.",
            hourly_rate: "300000.00",
            teaching_mode: "offline",
          },
        ],
      },
      {
        // ƒê·∫∑ng VƒÉn Tu·∫•n - Tin h·ªçc
        tutorEmail: "dangvantuan@gmail.com",
        courses: [
          {
            subject: "Tin h·ªçc",
            level: "THCS",
            title: "Tin h·ªçc THCS - L√†m quen v·ªõi l·∫≠p tr√¨nh",
            description:
              "Kh√≥a h·ªçc Tin h·ªçc THCS t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. Ch∆∞∆°ng tr√¨nh: S·ª≠ d·ª•ng m√°y t√≠nh c∆° b·∫£n, L·∫≠p tr√¨nh Scratch, Python ƒë∆°n gi·∫£n, T∆∞ duy thu·∫≠t to√°n. T·∫°o h·ª©ng th√∫ v√† n·ªÅn t·∫£ng v·ªØng ch·∫Øc cho t∆∞∆°ng lai c√¥ng ngh·ªá.",
            hourly_rate: "165000.00",
            teaching_mode: "both",
          },
          {
            subject: "Tin h·ªçc",
            level: "THPT",
            title: "L·∫≠p tr√¨nh Olympic & Competitive Programming",
            description:
              "Kh√≥a h·ªçc luy·ªán thi Olympic Tin h·ªçc v√† l·∫≠p tr√¨nh thi ƒë·∫•u. N·ªôi dung: Thu·∫≠t to√°n n√¢ng cao, C·∫•u tr√∫c d·ªØ li·ªáu, L·∫≠p tr√¨nh C++/Python, Gi·∫£i quy·∫øt b√†i to√°n logic. Gi·∫£ng vi√™n c√≥ 13 nƒÉm kinh nghi·ªám IT v√† ƒë√†o t·∫°o nhi·ªÅu h·ªçc sinh ƒë·∫°t gi·∫£i cao.",
            hourly_rate: "320000.00",
            teaching_mode: "both",
          },
        ],
      },
    ];

    // Create courses for each tutor
    for (const tutorData of coursesData) {
      // Find the tutor profile by email
      const tutorUser = await db
        .select({
          tutorProfileId: schema.tutorProfiles.id,
          email: schema.users.email,
        })
        .from(schema.tutorProfiles)
        .innerJoin(
          schema.users,
          eq(schema.users.id, schema.tutorProfiles.user_id)
        )
        .where(eq(schema.users.email, tutorData.tutorEmail))
        .limit(1);

      if (tutorUser.length === 0) {
        console.warn(
          `Tutor with email ${tutorData.tutorEmail} not found for courses`
        );
        continue;
      }

      const tutorProfileId = tutorUser[0].tutorProfileId;

      // Create courses for this tutor
      for (const courseData of tutorData.courses) {
        try {
          // Get subject and level IDs
          const subjectId = insertedSubjectsMap.get(courseData.subject);
          const levelId = insertedLevelsMap.get(courseData.level);

          if (!subjectId || !levelId) {
            console.warn(
              `Subject "${courseData.subject}" or level "${courseData.level}" not found for course ${courseData.title}`
            );
            continue;
          }

          // Check if course already exists
          const [existingCourse] = await db
            .select()
            .from(schema.courses)
            .where(
              sql`${schema.courses.tutor_id} = ${tutorProfileId} 
                  AND ${schema.courses.subject_id} = ${subjectId} 
                  AND ${schema.courses.level_id} = ${levelId}
                  AND ${schema.courses.title} = ${courseData.title}`
            );

          if (existingCourse) {
            console.log(
              `Course "${courseData.title}" for ${tutorData.tutorEmail} already exists, skipping...`
            );
            continue;
          }

          // Create the course
          await db.insert(schema.courses).values({
            tutor_id: tutorProfileId,
            subject_id: subjectId,
            level_id: levelId,
            title: courseData.title,
            description: courseData.description,
            hourly_rate: courseData.hourly_rate,
            teaching_mode: courseData.teaching_mode,
            status: "active",
            created_at: new Date(),
            updated_at: new Date(),
          });

          console.log(
            `‚úÖ Created course "${courseData.title}" for ${tutorData.tutorEmail} - ${courseData.subject} (${courseData.level})`
          );
        } catch (error) {
          console.error(
            `Error creating course "${courseData.title}" for ${tutorData.tutorEmail}:`,
            error
          );
        }
      }
    }

    console.log("‚úÖ Courses creation completed!");
  } catch (error) {
    console.error("‚ùå Error seeding database:", error);
    console.error(
      "Error details:",
      error instanceof Error ? error.message : String(error)
    );

    // Exit with error code to indicate failure
    process.exit(1);
  }
}

seed();
