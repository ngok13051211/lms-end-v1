// seed.ts
import { db } from "./index";
import * as schema from "@shared/schema";
import bcrypt from "bcrypt";
import { eq } from "drizzle-orm";
import { sql } from "drizzle-orm";

async function seed() {
  try {
    console.log("üå± Seeding database...");

    // Create a common password hash for all users
    const passwordHash = await bcrypt.hash("123123", 10);

    // Admin
    let [admin] = await db
      .select()
      .from(schema.users)
      .where(eq(schema.users.email, "admin@homitutor.vn"));
    if (!admin) {
      [admin] = await db
        .insert(schema.users)
        .values({
          username: "admin",
          email: "admin@homitutor.vn",
          password: await bcrypt.hash("admin123", 10),
          first_name: "Qu·∫£n",
          last_name: "Tr·ªã Vi√™n",
          role: "admin",
          is_verified: true,
          is_active: true,
          avatar: "",
          phone: "0987654321",
          created_at: new Date(),
          updated_at: new Date(),
        })
        .returning();
    }

    // ======= INSERT USERS =======
    // Create 10 tutors and 10 students with realistic Vietnamese information
    const tutors = [
      {
        username: "nguyenthanhminh",
        email: "nguyenthanhminh@gmail.com",
        password: passwordHash,
        first_name: "Minh",
        last_name: "Nguy·ªÖn Thanh",
        role: "tutor",
        date_of_birth: new Date("1990-05-15").toISOString(),
        address: "123 L√™ L·ª£i, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0901234567",
        avatar: "https://randomuser.me/api/portraits/men/1.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamthihuong",
        email: "phamthihuong@gmail.com",
        password: passwordHash,
        first_name: "H∆∞∆°ng",
        last_name: "Ph·∫°m Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1988-09-23").toISOString(),
        address: "45 Nguy·ªÖn Hu·ªá, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0912345678",
        avatar: "https://randomuser.me/api/portraits/women/2.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranthiha",
        email: "tranthiha@gmail.com",
        password: passwordHash,
        first_name: "H√†",
        last_name: "Tr·∫ßn Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1992-03-12").toISOString(),
        address: "78 ƒê·ªìng Kh·ªüi, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0923456789",
        avatar: "https://randomuser.me/api/portraits/women/3.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "levantrung",
        email: "levantrung@gmail.com",
        password: passwordHash,
        first_name: "Trung",
        last_name: "L√™ VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1985-11-07").toISOString(),
        address: "234 Nguy·ªÖn Tr√£i, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0934567890",
        avatar: "https://randomuser.me/api/portraits/men/4.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "vuthihien",
        email: "vuthihien@gmail.com",
        password: passwordHash,
        first_name: "Hi·ªÅn",
        last_name: "V≈© Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1991-04-25").toISOString(),
        address: "56 L√Ω T·ª± Tr·ªçng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0945678901",
        avatar: "https://randomuser.me/api/portraits/women/5.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenvanhai",
        email: "nguyenvanhai@gmail.com",
        password: passwordHash,
        first_name: "H·∫£i",
        last_name: "Nguy·ªÖn VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1989-07-30").toISOString(),
        address: "102 ƒêi·ªán Bi√™n Ph·ªß, Qu·∫≠n B√¨nh Th·∫°nh, TP. H·ªì Ch√≠ Minh",
        phone: "0956789012",
        avatar: "https://randomuser.me/api/portraits/men/6.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "hoangthilan",
        email: "hoangthilan@gmail.com",
        password: passwordHash,
        first_name: "Lan",
        last_name: "Ho√†ng Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1993-02-14").toISOString(),
        address: "75 Tr·∫ßn H∆∞ng ƒê·∫°o, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0967890123",
        avatar: "https://randomuser.me/api/portraits/women/7.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranvanduc",
        email: "tranvanduc@gmail.com",
        password: passwordHash,
        first_name: "ƒê·ª©c",
        last_name: "Tr·∫ßn VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1987-10-05").toISOString(),
        address: "321 V√µ VƒÉn Ng√¢n, Qu·∫≠n Th·ªß ƒê·ª©c, TP. H·ªì Ch√≠ Minh",
        phone: "0978901234",
        avatar: "https://randomuser.me/api/portraits/men/8.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamthithanh",
        email: "phamthithanh@gmail.com",
        password: passwordHash,
        first_name: "Thanh",
        last_name: "Ph·∫°m Th·ªã",
        role: "tutor",
        date_of_birth: new Date("1994-06-18").toISOString(),
        address: "189 C√°ch M·∫°ng Th√°ng 8, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0989012345",
        avatar: "https://randomuser.me/api/portraits/women/9.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "dangvantuan",
        email: "dangvantuan@gmail.com",
        password: passwordHash,
        first_name: "Tu·∫•n",
        last_name: "ƒê·∫∑ng VƒÉn",
        role: "tutor",
        date_of_birth: new Date("1986-12-22").toISOString(),
        address: "67 Ph·∫°m Ng·ªçc Th·∫°ch, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0990123456",
        avatar: "https://randomuser.me/api/portraits/men/10.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ];

    const students = [
      {
        username: "nguyenthinguyen",
        email: "nguyenthinguyen@gmail.com",
        password: passwordHash,
        first_name: "Nguy√™n",
        last_name: "Nguy·ªÖn Th·ªã",
        role: "student",
        date_of_birth: new Date("2000-02-10").toISOString(),
        address: "45 Tr·∫ßn Ph√∫, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0801234567",
        avatar: "https://randomuser.me/api/portraits/women/11.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranvanbinh",
        email: "tranvanbinh@gmail.com",
        password: passwordHash,
        first_name: "B√¨nh",
        last_name: "Tr·∫ßn VƒÉn",
        role: "student",
        date_of_birth: new Date("1998-08-15").toISOString(),
        address: "123 B√† H·∫°t, Qu·∫≠n 10, TP. H·ªì Ch√≠ Minh",
        phone: "0812345678",
        avatar: "https://randomuser.me/api/portraits/men/12.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "levanthanh",
        email: "levanthanh@gmail.com",
        password: passwordHash,
        first_name: "Th√†nh",
        last_name: "L√™ VƒÉn",
        role: "student",
        date_of_birth: new Date("1999-04-20").toISOString(),
        address: "56 L√™ VƒÉn S·ªπ, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP. H·ªì Ch√≠ Minh",
        phone: "0823456789",
        avatar: "https://randomuser.me/api/portraits/men/13.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "vothihong",
        email: "vothihong@gmail.com",
        password: passwordHash,
        first_name: "H·ªìng",
        last_name: "V√µ Th·ªã",
        role: "student",
        date_of_birth: new Date("2001-07-05").toISOString(),
        address: "234 Nguy·ªÖn VƒÉn C·ª´, Qu·∫≠n 5, TP. H·ªì Ch√≠ Minh",
        phone: "0834567890",
        avatar: "https://randomuser.me/api/portraits/women/14.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenminhquang",
        email: "nguyenminhquang@gmail.com",
        password: passwordHash,
        first_name: "Quang",
        last_name: "Nguy·ªÖn Minh",
        role: "student",
        date_of_birth: new Date("2002-11-30").toISOString(),
        address: "78 ƒêinh Ti√™n Ho√†ng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0845678901",
        avatar: "https://randomuser.me/api/portraits/men/15.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "tranthihue",
        email: "tranthihue@gmail.com",
        password: passwordHash,
        first_name: "Hu·ªá",
        last_name: "Tr·∫ßn Th·ªã",
        role: "student",
        date_of_birth: new Date("2000-09-12").toISOString(),
        address: "90 B√† Tri·ªáu, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0856789012",
        avatar: "https://randomuser.me/api/portraits/women/16.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "phamvanthanh",
        email: "phamvanthanh@gmail.com",
        password: passwordHash,
        first_name: "Th√†nh",
        last_name: "Ph·∫°m VƒÉn",
        role: "student",
        date_of_birth: new Date("1997-03-25").toISOString(),
        address: "123 L√Ω Th∆∞·ªùng Ki·ªát, Qu·∫≠n 10, TP. H·ªì Ch√≠ Minh",
        phone: "0867890123",
        avatar: "https://randomuser.me/api/portraits/men/17.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "hoangthuhuong",
        email: "hoangthuhuong@gmail.com",
        password: passwordHash,
        first_name: "H∆∞∆°ng",
        last_name: "Ho√†ng Thu",
        role: "student",
        date_of_birth: new Date("1999-01-15").toISOString(),
        address: "45 Hai B√† Tr∆∞ng, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh",
        phone: "0878901234",
        avatar: "https://randomuser.me/api/portraits/women/18.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "lethihoa",
        email: "lethihoa@gmail.com",
        password: passwordHash,
        first_name: "Hoa",
        last_name: "L√™ Th·ªã",
        role: "student",
        date_of_birth: new Date("2002-05-20").toISOString(),
        address: "67 Phan ƒê√¨nh Ph√πng, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP. H·ªì Ch√≠ Minh",
        phone: "0889012345",
        avatar: "https://randomuser.me/api/portraits/women/19.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
      {
        username: "nguyenduchuy",
        email: "nguyenduchuy@gmail.com",
        password: passwordHash,
        first_name: "Huy",
        last_name: "Nguy·ªÖn ƒê·ª©c",
        role: "student",
        date_of_birth: new Date("2001-10-10").toISOString(),
        address: "34 Nguy·ªÖn ƒê√¨nh Chi·ªÉu, Qu·∫≠n 3, TP. H·ªì Ch√≠ Minh",
        phone: "0890123456",
        avatar: "https://randomuser.me/api/portraits/men/20.jpg",
        is_verified: false,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ];

    // Check for existing users first to avoid duplicates
    const existingUsers = await db
      .select({ email: schema.users.email })
      .from(schema.users)
      .where(
        sql`${schema.users.email} IN (${[...tutors, ...students]
          .map((user) => user.email)
          .join(",")})`
      );

    const existingEmails = new Set(existingUsers.map((user) => user.email));

    // Filter out any users that already exist in the database
    const newTutors = tutors.filter(
      (tutor) => !existingEmails.has(tutor.email)
    );
    const newStudents = students.filter(
      (student) => !existingEmails.has(student.email)
    );
    // Combine the filtered arrays
    const usersToInsert = [...newTutors, ...newStudents]; // Map through your users and convert dates properly according to schema expectations
    const usersWithProperDates = usersToInsert.map((user) => {
      // Create a base user object with the date fields converted
      const userWithDates = {
        ...user,
        created_at: new Date(user.created_at), // Convert string to Date object
        updated_at: new Date(user.updated_at), // Convert string to Date object
      };

      // Handle date_of_birth specially based on its expected type in the schema
      if (user.date_of_birth) {
        // In the schema, date_of_birth is a text field, so we keep it as string
        userWithDates.date_of_birth = user.date_of_birth; // Keep as string since schema expects text type
      }

      return userWithDates;
    });

    // Use the converted array for insertion
    const insertedUsers =
      usersWithProperDates.length > 0
        ? await db.insert(schema.users).values(usersWithProperDates).returning({
            id: schema.users.id,
            email: schema.users.email,
            role: schema.users.role,
          })
        : [];

    console.log(
      `‚úÖ Inserted ${insertedUsers.length} users. ${existingEmails.size} users already existed.`
    );

    // ======= INSERT SUBJECTS =======
    const subjects = [
      // C√°c m√¥n c∆° b·∫£n (cho m·ªçi c·∫•p h·ªçc)
      {
        name: "To√°n h·ªçc",
        icon: "calculate",
        description:
          "Ph√°t tri·ªÉn t∆∞ duy logic v√† k·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ qua c√°c b√†i to√°n t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
      },
      {
        name: "Ti·∫øng Anh",
        icon: "language",
        description:
          "N√¢ng cao 4 k·ªπ nƒÉng nghe, n√≥i, ƒë·ªçc, vi·∫øt v√† chu·∫©n b·ªã cho c√°c k·ª≥ thi qu·ªëc t·∫ø IELTS, TOEFL",
      },
      {
        name: "Ng·ªØ vƒÉn",
        icon: "book_open",
        description:
          "R√®n luy·ªán k·ªπ nƒÉng ph√¢n t√≠ch, c·∫£m th·ª• vƒÉn h·ªçc v√† ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán",
      },

      // M√¥n khoa h·ªçc t·ª± nhi√™n
      {
        name: "V·∫≠t l√Ω",
        icon: "bolt",
        description:
          "Kh√°m ph√° c√°c quy lu·∫≠t v·∫≠n ƒë·ªông c·ªßa v·∫≠t ch·∫•t v√† ·ª©ng d·ª•ng v√†o th·ª±c ti·ªÖn cu·ªôc s·ªëng",
      },
      {
        name: "H√≥a h·ªçc",
        icon: "science",
        description:
          "T√¨m hi·ªÉu v·ªÅ c·∫•u tr√∫c, t√≠nh ch·∫•t c·ªßa v·∫≠t ch·∫•t v√† c√°c ph·∫£n ·ª©ng h√≥a h·ªçc th√¥ng qua th√≠ nghi·ªám",
      },
      {
        name: "Sinh h·ªçc",
        icon: "biotech",
        description:
          "Kh√°m ph√° th·∫ø gi·ªõi s·ªëng t·ª´ c·∫•p ƒë·ªô ph√¢n t·ª≠ ƒë·∫øn h·ªá sinh th√°i v√† ·ª©ng d·ª•ng trong y h·ªçc, n√¥ng nghi·ªáp",
      },

      // M√¥n khoa h·ªçc x√£ h·ªôi
      {
        name: "L·ªãch s·ª≠",
        icon: "history",
        description:
          "T√¨m hi·ªÉu v·ªÅ qu√° kh·ª© ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ hi·ªán t·∫°i v√† ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai",
      },
      {
        name: "ƒê·ªãa l√Ω",
        icon: "public",
        description:
          "Kh√°m ph√° th·∫ø gi·ªõi t·ª± nhi√™n v√† x√£ h·ªôi, m·ªëi quan h·ªá gi·ªØa con ng∆∞·ªùi v·ªõi m√¥i tr∆∞·ªùng",
      },
      {
        name: "Gi√°o d·ª•c c√¥ng d√¢n",
        icon: "groups",
        description:
          "H·ªçc v·ªÅ quy·ªÅn v√† nghƒ©a v·ª• c√¥ng d√¢n, ƒë·∫°o ƒë·ª©c, ph√°p lu·∫≠t v√† k·ªπ nƒÉng s·ªëng",
      },

      // C√°c m√¥n nƒÉng khi·∫øu
      {
        name: "√Çm nh·∫°c",
        icon: "music_note",
        description:
          "Ph√°t tri·ªÉn nƒÉng khi·∫øu √¢m nh·∫°c qua vi·ªác h·ªçc nh·∫°c c·ª•, thanh nh·∫°c v√† l√Ω thuy·∫øt √¢m nh·∫°c",
      },
      {
        name: "M·ªπ thu·∫≠t",
        icon: "palette",
        description:
          "Kh∆°i d·∫≠y s√°ng t·∫°o ngh·ªá thu·∫≠t qua c√°c k·ªπ thu·∫≠t v·∫Ω, h·ªôi h·ªça v√† ƒëi√™u kh·∫Øc",
      },
      {
        name: "Th·ªÉ d·ª•c th·ªÉ thao",
        icon: "sports",
        description:
          "R√®n luy·ªán s·ª©c kh·ªèe, k·ªπ nƒÉng v·∫≠n ƒë·ªông v√† tinh th·∫ßn ƒë·ªìng ƒë·ªôi qua c√°c m√¥n th·ªÉ thao",
      },

      // M√¥n c√¥ng ngh·ªá
      {
        name: "Tin h·ªçc",
        icon: "computer",
        description:
          "L√†m quen v·ªõi m√°y t√≠nh, h·ªçc c√°c ph·∫ßn m·ªÅm c∆° b·∫£n v√† ng√¥n ng·ªØ l·∫≠p tr√¨nh cho m·ªçi l·ª©a tu·ªïi",
      },
      {
        name: "L·∫≠p tr√¨nh",
        icon: "code",
        description:
          "H·ªçc c√°ch x√¢y d·ª±ng website, ·ª©ng d·ª•ng di ƒë·ªông v√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ qua code",
      },

      // D√†nh cho sinh vi√™n ƒë·∫°i h·ªçc
      {
        name: "Kinh t·∫ø h·ªçc",
        icon: "trending_up",
        description:
          "Hi·ªÉu v·ªÅ c√°c nguy√™n l√Ω kinh t·∫ø vƒ© m√¥, vi m√¥ v√† ph√¢n t√≠ch d·ªØ li·ªáu kinh t·∫ø",
      },
      {
        name: "K·ªπ nƒÉng m·ªÅm",
        icon: "psychology",
        description:
          "Ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp, l√†m vi·ªác nh√≥m, qu·∫£n l√Ω th·ªùi gian v√† t∆∞ duy ph·∫£n bi·ªán",
      },
    ];

    // Insert subjects and record their IDs for later association
    const insertedSubjectsMap = new Map();
    for (const sub of subjects) {
      // Add the created_at and updated_at fields to the subject data
      const subjectData = {
        ...sub,
        created_at: new Date(), // Use Date object directly, not string
        updated_at: new Date(), // Use Date object directly, not string
      };

      try {
        // Try to insert the subject
        const [insertedSub] = await db
          .insert(schema.subjects)
          .values(subjectData)
          .onConflictDoNothing()
          .returning();

        if (insertedSub) {
          insertedSubjectsMap.set(insertedSub.name, insertedSub.id);
        } else {
          // If not inserted (already exists), get the existing subject ID
          const [existingSub] = await db
            .select()
            .from(schema.subjects)
            .where(eq(schema.subjects.name, sub.name));

          if (existingSub) {
            insertedSubjectsMap.set(existingSub.name, existingSub.id);
          }
        }
      } catch (error) {
        console.error(`Error inserting subject ${sub.name}:`, error);
      }
    }

    // ======= INSERT EDUCATION LEVELS =======
    const levels = [
      {
        name: "Ti·ªÉu h·ªçc",
        description:
          "H·ªó tr·ª£ n·ªÅn t·∫£ng h·ªçc t·∫≠p v·ªØng ch·∫Øc cho c√°c em h·ªçc sinh 6-11 tu·ªïi",
      },
      {
        name: "THCS",
        description:
          "ƒê·ªìng h√†nh c√πng h·ªçc sinh 11-15 tu·ªïi v∆∞·ª£t qua th·ª≠ th√°ch c·ªßa b·∫≠c trung h·ªçc c∆° s·ªü",
      },
      {
        name: "THPT",
        description:
          "Chu·∫©n b·ªã ki·∫øn th·ª©c v√† k·ªπ nƒÉng cho k·ª≥ thi quan tr·ªçng c·ªßa h·ªçc sinh 15-18 tu·ªïi",
      },
      {
        name: "ƒê·∫°i h·ªçc",
        description:
          "H·ªó tr·ª£ sinh vi√™n trong c√°c m√¥n h·ªçc chuy√™n ng√†nh v√† n√¢ng cao ki·∫øn th·ª©c h·ªçc thu·∫≠t",
      },
      {
        name: "NƒÉng khi·∫øu",
        description:
          "Ph√°t tri·ªÉn t√†i nƒÉng v√† ƒëam m√™ trong c√°c lƒ©nh v·ª±c ngh·ªá thu·∫≠t, th·ªÉ thao v√† c√¥ng ngh·ªá",
      },
    ]; // Insert education levels and record their IDs for later association
    const insertedLevelsMap = new Map();
    for (const level of levels) {
      const currentDate = new Date();
      // Add the created_at and updated_at fields to the level data
      const levelData = {
        ...level,
        created_at: currentDate, // Use Date object directly, not string
        updated_at: currentDate, // Use Date object directly, not string
      };

      try {
        // Try to insert the education level
        const [insertedLevel] = await db
          .insert(schema.educationLevels)
          .values(levelData)
          .onConflictDoNothing()
          .returning();

        if (insertedLevel) {
          insertedLevelsMap.set(insertedLevel.name, insertedLevel.id);
        } else {
          // If not inserted (already exists), get the existing level ID
          const [existingLevel] = await db
            .select()
            .from(schema.educationLevels)
            .where(eq(schema.educationLevels.name, level.name));

          if (existingLevel) {
            insertedLevelsMap.set(existingLevel.name, existingLevel.id);
          }
        }
      } catch (error) {
        console.error(`Error inserting education level ${level.name}:`, error);
      }
    }

    // ======= ASSOCIATE SUBJECTS WITH EDUCATION LEVELS =======
    // Define which subjects are applicable to which education levels
    const subjectLevelAssociations = [
      // C√°c m√¥n c∆° b·∫£n - T·∫•t c·∫£ c√°c c·∫•p h·ªçc
      {
        subjectName: "To√°n h·ªçc",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "Ti·∫øng Anh",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "Ng·ªØ vƒÉn",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },

      // Khoa h·ªçc t·ª± nhi√™n - T·ª´ THCS tr·ªü l√™n
      { subjectName: "V·∫≠t l√Ω", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },
      { subjectName: "H√≥a h·ªçc", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },
      { subjectName: "Sinh h·ªçc", levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc"] },

      // Khoa h·ªçc x√£ h·ªôi
      {
        subjectName: "L·ªãch s·ª≠",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "ƒê·ªãa l√Ω",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "Gi√°o d·ª•c c√¥ng d√¢n",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT"],
      },

      // C√°c m√¥n nƒÉng khi·∫øu
      {
        subjectName: "√Çm nh·∫°c",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "NƒÉng khi·∫øu"],
      },
      {
        subjectName: "M·ªπ thu·∫≠t",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "NƒÉng khi·∫øu"],
      },
      {
        subjectName: "Th·ªÉ d·ª•c th·ªÉ thao",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "NƒÉng khi·∫øu"],
      },

      // M√¥n c√¥ng ngh·ªá
      {
        subjectName: "Tin h·ªçc",
        levels: ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc"],
      },
      {
        subjectName: "L·∫≠p tr√¨nh",
        levels: ["THCS", "THPT", "ƒê·∫°i h·ªçc", "NƒÉng khi·∫øu"],
      },

      // D√†nh cho sinh vi√™n ƒë·∫°i h·ªçc
      { subjectName: "Kinh t·∫ø h·ªçc", levels: ["ƒê·∫°i h·ªçc"] },
      { subjectName: "K·ªπ nƒÉng m·ªÅm", levels: ["THPT", "ƒê·∫°i h·ªçc"] },
    ];

    // Create subject-level associations in the database
    for (const assoc of subjectLevelAssociations) {
      const subjectId = insertedSubjectsMap.get(assoc.subjectName);

      if (!subjectId) {
        console.warn(
          `Subject "${assoc.subjectName}" not found. Skipping associations.`
        );
        continue;
      }

      for (const levelName of assoc.levels) {
        const levelId = insertedLevelsMap.get(levelName);

        if (!levelId) {
          console.warn(
            `Education level "${levelName}" not found. Skipping association.`
          );
          continue;
        }

        try {
          // Insert subject-education level association
          await db
            .insert(schema.subjectEducationLevels)
            .values({
              subject_id: subjectId,
              level_id: levelId,
              created_at: new Date(), // Use Date object directly, not string
            })
            .onConflictDoNothing();
        } catch (error) {
          console.error(
            `Error associating subject ${assoc.subjectName} with level ${levelName}:`,
            error
          );
        }
      }
    }
    console.log("‚úÖ Database seeding completed successfully!");
  } catch (error) {
    console.error("‚ùå Error seeding database:", error);
    console.error(
      "Error details:",
      error instanceof Error ? error.message : String(error)
    );

    // Exit with error code to indicate failure
    process.exit(1);
  }
}

seed();
