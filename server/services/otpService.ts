import { db } from "@db";
import { emailOtps } from "@shared/schema";
import * as bcrypt from "bcrypt";
import { eq, and, lt, not, desc } from "drizzle-orm";
import transporter from "../config/mail";

/**
 * Service for handling OTP (One-Time Password) operations
 */
class OtpService {
    /**
     * Generate a random 6-digit OTP code
     */
    generateOtp(): string {
        // Generate a 6-digit random number
        return Math.floor(100000 + Math.random() * 900000).toString();
    }    /**
     * Save OTP to database
     * @param email The email to associate with the OTP
     * @param otp The plain text OTP
     * @returns The saved OTP record
     */
    async saveOtp(email: string, otp: string) {
        try {
            // Hash the OTP for security before storing in the database
            const hashedOtp = await bcrypt.hash(otp, 10);

            // Set expiration time (5 minutes from now)
            const expiresAt = new Date();
            expiresAt.setMinutes(expiresAt.getMinutes() + 5);

            // First invalidate ALL existing OTPs for this email to avoid confusion
            const invalidateResult = await db
                .update(emailOtps)
                .set({ used: true })
                .where(eq(emailOtps.email, email));

            console.log(`ƒê√£ v√¥ hi·ªáu h√≥a ${invalidateResult.rowCount} m√£ OTP c≈© cho ${email}`);

            // Now save the new OTP
            const [savedOtp] = await db
                .insert(emailOtps)
                .values({
                    email,
                    otp: hashedOtp,
                    expires_at: expiresAt,
                    created_at: new Date(),
                })
                .returning();

            console.log(`ƒê√£ l∆∞u OTP m·ªõi v·ªõi ID=${savedOtp.id} cho ${email}, h·∫øt h·∫°n l√∫c: ${expiresAt.toISOString()}`);

            return savedOtp;
        } catch (error) {
            console.error("Error saving OTP:", error);
            throw new Error("Failed to save OTP");
        }
    }    /**
     * Send OTP email to the user
     * @param email Recipient email
     * @param otp The OTP code to send
     */
    async sendOtpEmail(email: string, otp: string) {
        try {
            console.log(`[${new Date().toISOString()}] ƒêang chu·∫©n b·ªã g·ª≠i m√£ OTP ${otp} t·ªõi ƒë·ªãa ch·ªâ ${email}...`);

            // Email template
            const mailOptions = {
                from: process.env.MAIL_FROM || "HomiTutor <noreply@homitutor.vn>",
                to: email,
                subject: "M√£ x√°c th·ª±c OTP - HomiTutor",
                html: this.getEmailTemplate(otp),
            };

            // Log OTP m·ªôt c√°ch r√µ r√†ng ƒë·ªÉ d·ªÖ debug
            console.log("\n=============================================");
            console.log(`üìß G·ª¨I M√É X√ÅC TH·ª∞C CHO: ${email}`);
            console.log(`üîë M√É OTP H·ª¢P L·ªÜ DUY NH·∫§T: ${otp}`);
            console.log(`‚è∞ TH·ªúI GIAN G·ª¨I: ${new Date().toLocaleString()}`);
            console.log("=============================================\n");

            // G·ª≠i email th·∫≠t ƒë·∫øn ƒë·ªãa ch·ªâ email
            console.log("ƒêang k·∫øt n·ªëi t·ªõi SMTP server...");
            const info = await transporter.sendMail(mailOptions);
            console.log(`‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn ${email}!`);

            // Log th√¥ng tin chi ti·∫øt v·ªÅ email
            if (info.messageId) {
                console.log(`Email message ID: ${info.messageId}`);
            }

            if (info.preview) {
                console.log(`Preview URL: ${info.preview}`);
            } else if (info.response) {
                console.log(`Email response: ${info.response}`);
            }

            return info;
        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i email OTP ƒë·∫øn ${email}:`, error);
            throw new Error("Failed to send OTP email");
        }
    }/**
     * Verify OTP code against stored value
     * @param email The email associated with the OTP
     * @param otp The OTP to verify
     * @returns True if verification successful, false otherwise
     */
    async verifyOtp(email: string, otp: string): Promise<boolean> {
        try {
            // Get the NEWEST unused OTP for this email (s·ª≠a l·∫°i t·ª´ orderBy created_at ASC th√†nh DESC)
            const storedOtp = await db.query.emailOtps.findFirst({
                where: and(
                    eq(emailOtps.email, email),
                    eq(emailOtps.used, false)
                ),
                orderBy: (otps) => [desc(otps.created_at)], // L·∫•y OTP m·ªõi nh·∫•t
            });

            if (!storedOtp) {
                console.log('No valid OTP found for email:', email);
                return false;
            }

            // Check if OTP has expired
            const now = new Date();
            const expiresAt = new Date(storedOtp.expires_at);

            if (now > expiresAt) {
                console.log('OTP expired. Current time:', now, 'Expires at:', expiresAt);
                return false;
            }

            // Verify OTP
            const isValid = await bcrypt.compare(otp, storedOtp.otp);
            console.log(`OTP validation for ${email}: ${isValid ? 'SUCCESS' : 'FAILED'}`);

            if (isValid) {
                // Mark OTP as used
                await db
                    .update(emailOtps)
                    .set({ used: true })
                    .where(eq(emailOtps.id, storedOtp.id));
                // ƒê√°nh d·∫•u t·∫•t c·∫£ OTP kh√°c c·ªßa email n√†y l√† ƒë√£ s·ª≠ d·ª•ng (ƒë·ªÉ tr√°nh l·∫ßm l·∫´n)
                await db
                    .update(emailOtps)
                    .set({ used: true })
                    .where(and(
                        eq(emailOtps.email, email),
                        not(eq(emailOtps.id, storedOtp.id))
                    ));

                console.log(`OTP ${otp} cho ${email} ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng v√† ƒë√°nh d·∫•u ƒë√£ s·ª≠ d·ª•ng`);
            } else {
                console.log(`OTP kh√¥ng h·ª£p l·ªá cho ${email}. OTP ƒë√£ nh·∫≠p: ${otp}`);
            }

            return isValid;
        } catch (error) {
            console.error("Error verifying OTP:", error);
            throw new Error("Failed to verify OTP");
        }
    }

    /**
     * Create HTML email template for OTP
     * @param otp The OTP code to include in the template
     * @returns HTML template string
     */
    private getEmailTemplate(otp: string): string {
        return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
        <div style="text-align: center; margin-bottom: 20px;">
          <h1 style="color: #2563eb; margin: 0;">Homi<span style="color: #10b981;">Tutor</span></h1>
        </div>
        <div style="background-color: #f9fafb; padding: 20px; border-radius: 5px; margin-bottom: 20px;">
          <h2 style="margin-top: 0; color: #374151;">X√°c th·ª±c email c·ªßa b·∫°n</h2>
          <p style="color: #6b7280; margin-bottom: 20px;">Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh x√°c th·ª±c:</p>
          <div style="background-color: #ffffff; padding: 15px; border: 1px dashed #d1d5db; border-radius: 5px; text-align: center; margin-bottom: 20px;">
            <span style="font-size: 24px; font-weight: bold; letter-spacing: 5px; color: #2563eb;">${otp}</span>
          </div>
          <p style="color: #6b7280; margin-bottom: 0;">M√£ x√°c th·ª±c c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>.</p>
          <p style="color: #6b7280; margin-top: 20px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
        </div>
        <div style="text-align: center; color: #9ca3af; font-size: 12px;">
          <p>¬© ${new Date().getFullYear()} HomiTutor. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
      </div>
    `;
    }    /**
     * Check if we can send a new OTP (rate limiting)
     * @param email Email to check
     * @returns Boolean indicating if we can send new OTP
     */
    private async canSendNewOtp(email: string): Promise<boolean> {
        try {
            // Get the latest OTP for this email
            const latestOtp = await db.query.emailOtps.findFirst({
                where: eq(emailOtps.email, email),
                orderBy: (otps) => [desc(otps.created_at)],
            });

            if (!latestOtp) {
                return true; // No previous OTP, can send
            }

            // Check if the latest OTP was sent within the last 60 seconds
            const now = new Date();
            const otpCreationTime = new Date(latestOtp.created_at);
            const timeDifferenceInSeconds = (now.getTime() - otpCreationTime.getTime()) / 1000;

            // If less than 60 seconds have passed, refuse to send a new OTP
            if (timeDifferenceInSeconds < 60) {
                console.log(`Rate limiting OTP for ${email}. Last OTP sent ${Math.floor(timeDifferenceInSeconds)} seconds ago.`);
                return false;
            }

            return true;
        } catch (error) {
            console.error("Error checking OTP rate limit:", error);
            return true; // In case of error, allow sending to avoid blocking legitimate users
        }
    }    /**
     * Generate and send OTP in one function
     * @param email Recipient email
     * @returns The generated OTP
     */
    async generateAndSendOtp(email: string): Promise<string> {
        try {
            // Check rate limiting
            const canSend = await this.canSendNewOtp(email);
            if (!canSend) {
                console.log(`OTP request rate-limited for ${email}`);

                // Thay v√¨ n√©m l·ªói, l·∫•y OTP hi·ªán t·∫°i v√† g·ª≠i l·∫°i n·∫øu ch∆∞a h·∫øt h·∫°n
                const latestOtp = await db.query.emailOtps.findFirst({
                    where: and(
                        eq(emailOtps.email, email),
                        eq(emailOtps.used, false)
                    ),
                    orderBy: (otps) => [desc(otps.created_at)],
                });

                if (latestOtp) {
                    const now = new Date();
                    const expiresAt = new Date(latestOtp.expires_at);

                    if (now < expiresAt) {
                        // N·∫øu OTP v·∫´n c√≤n hi·ªáu l·ª±c, gi·∫£i m√£ v√† g·ª≠i l·∫°i
                        // L∆∞u √Ω: Ch√∫ng ta kh√¥ng th·ªÉ l·∫•y tr·ª±c ti·∫øp OTP t·ª´ DB v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c hash
                        console.log(`G·ª≠i l·∫°i OTP ƒë√£ t·ªìn t·∫°i cho ${email}`);

                        // Th√¥ng b√°o l·ªói rate limit nh∆∞ng v·∫´n cho bi·∫øt OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥
                        throw new Error("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i g·∫ßn ƒë√¢y. Vui l√≤ng ki·ªÉm tra email ho·∫∑c th·ª≠ l·∫°i sau 60 gi√¢y.");
                    }
                }

                throw new Error("OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i g·∫ßn ƒë√¢y. Vui l√≤ng ƒë·ª£i 60 gi√¢y tr∆∞·ªõc khi y√™u c·∫ßu l·∫°i.");
            }

            // Ch·ªâ t·∫°o OTP m·ªõi v√† l∆∞u v√†o DB khi kh√¥ng c√≥ OTP h·ª£p l·ªá ho·∫∑c ƒë√£ qu√° h·∫°n
            const otp = this.generateOtp();
            await this.saveOtp(email, otp);
            await this.sendOtpEmail(email, otp);

            // Log r√µ r√†ng ƒë·ªÉ d·ªÖ debug
            console.log(`‚úÖ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i th√†nh c√¥ng: ${otp} cho ${email}`);

            return otp;
        } catch (error) {
            console.error("Error in generateAndSendOtp:", error);
            throw new Error(error instanceof Error ? error.message : "Failed to generate and send OTP");
        }
    }
}

export default new OtpService();
