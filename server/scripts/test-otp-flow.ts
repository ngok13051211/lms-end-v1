/**
 * Script ki·ªÉm tra qu√° tr√¨nh g·ª≠i v√† x√°c th·ª±c OTP
 * Ch·∫°y v·ªõi: npm run test:otp
 */

import otpService from "../services/otpService";
import { db } from "@db";
import { users, emailOtps } from "@shared/schema";
import { eq, and, desc } from "drizzle-orm";
import dotenv from "dotenv";

dotenv.config();

// ƒê·ªãa ch·ªâ email test
const TEST_EMAIL = "test@example.com"; // Thay b·∫±ng email th·∫≠t ƒë·ªÉ test

async function testOtpSystem() {
  console.log("üß™ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA H·ªÜ TH·ªêNG OTP");
  console.log("=================================");

  try {
    // Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a (ch·ªâ cho m·ª•c ƒë√≠ch test)
    const user = await db.query.users.findFirst({
      where: eq(users.email, TEST_EMAIL)
    });

    if (!user) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email ${TEST_EMAIL} trong database`);
      console.log("‚ùì Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc ho·∫∑c s·ª≠a TEST_EMAIL trong script");
      return;
    }

    console.log(`‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng: ${TEST_EMAIL}`);

    // Ki·ªÉm tra t√¨nh tr·∫°ng OTP hi·ªán t·∫°i
    const currentOtps = await db.query.emailOtps.findMany({
      where: eq(emailOtps.email, TEST_EMAIL),
      orderBy: (otps) => [desc(otps.created_at)]
    });

    if (currentOtps.length > 0) {
      console.log(`üîç Hi·ªán c√≥ ${currentOtps.length} OTP trong database cho ${TEST_EMAIL}`);
      console.log(`üîç OTP m·ªõi nh·∫•t ƒë∆∞·ª£c t·∫°o l√∫c: ${new Date(currentOtps[0].created_at).toLocaleString()}`);
    } else {
      console.log(`üîç Ch∆∞a c√≥ OTP n√†o trong database cho ${TEST_EMAIL}`);
    }

    // T·∫°o v√† g·ª≠i OTP ƒë·∫ßu ti√™n
    console.log("\nüîÑ TEST 1: G·ª≠i OTP l·∫ßn ƒë·∫ßu ti√™n");
    console.log("-------------------------------");
    try {
      const otp1 = await otpService.generateAndSendOtp(TEST_EMAIL);
      console.log(`‚úÖ OTP1 ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i th√†nh c√¥ng: ${otp1}`);
    } catch (error) {
      console.error(`‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP1:`, error);
    }

    // C·ªë g·∫Øng g·ª≠i OTP th·ª© hai ngay l·∫≠p t·ª©c (n√™n b·ªã rate limit)
    console.log("\nüîÑ TEST 2: Ki·ªÉm tra rate limiting (g·ª≠i OTP th·ª© hai ngay l·∫≠p t·ª©c)");
    console.log("-------------------------------------------------------");
    try {
      const otp2 = await otpService.generateAndSendOtp(TEST_EMAIL);
      console.log(`‚ö†Ô∏è OTP2 ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i th√†nh c√¥ng m·∫∑c d√π c√≥ rate limit: ${otp2}`);
      console.log("‚ö†Ô∏è Rate limiting c√≥ v·∫ª kh√¥ng ho·∫°t ƒë·ªông! C·∫ßn ki·ªÉm tra l·∫°i!");
    } catch (error) {
      console.log(`‚úÖ Rate limiting ho·∫°t ƒë·ªông t·ªët: ${error.message}`);
    }

    // L·∫•y OTP m·ªõi nh·∫•t ƒë·ªÉ th·ª≠ x√°c th·ª±c
    const latestOtp = await db.query.emailOtps.findFirst({
      where: and(
        eq(emailOtps.email, TEST_EMAIL),
        eq(emailOtps.used, false)
      ),
      orderBy: (otps) => [desc(otps.created_at)]
    });

    if (!latestOtp) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y OTP h·ª£p l·ªá ƒë·ªÉ test x√°c th·ª±c");
      return;
    }

    // Ch√∫ √Ω: Ch√∫ng ta kh√¥ng th·ªÉ l·∫•y OTP g·ªëc t·ª´ database v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c hash
    console.log("\n‚ö†Ô∏è Kh√¥ng th·ªÉ test x√°c th·ª±c t·ª± ƒë·ªông v√¨ OTP ƒë√£ ƒë∆∞·ª£c hash trong database.");
    console.log("‚ö†Ô∏è ƒê·ªÉ test x√°c th·ª±c, vui l√≤ng s·ª≠ d·ª•ng OTP ƒë∆∞·ª£c log trong console ·ªü b∆∞·ªõc tr∆∞·ªõc.");
    console.log("‚ö†Ô∏è B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API ƒë·ªÉ x√°c th·ª±c OTP th·ªß c√¥ng:");
    console.log(`‚ö†Ô∏è POST /api/v1/verify/verify-otp v·ªõi body: {"email": "${TEST_EMAIL}", "otp": "<m√£ otp>"}`);

    // Danh s√°ch c√°c OTP hi·ªán t·∫°i sau khi test
    const finalOtps = await db.query.emailOtps.findMany({
      where: eq(emailOtps.email, TEST_EMAIL),
      orderBy: (otps) => [desc(otps.created_at)]
    });

    console.log("\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA");
    console.log("===================");
    console.log(`üìß Email test: ${TEST_EMAIL}`);
    console.log(`üî¢ T·ªïng s·ªë OTP trong database: ${finalOtps.length}`);
    console.log(`üö´ S·ªë OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${finalOtps.filter(o => o.used).length}`);
    console.log(`‚úÖ S·ªë OTP ch∆∞a s·ª≠ d·ª•ng: ${finalOtps.filter(o => !o.used).length}`);

    if (finalOtps.filter(o => !o.used).length > 1) {
      console.log("‚ö†Ô∏è C·∫¢NH B√ÅO: C√≥ nhi·ªÅu h∆°n 1 OTP ch∆∞a s·ª≠ d·ª•ng! C·∫ßn ki·ªÉm tra l·∫°i logic v√¥ hi·ªáu h√≥a OTP c≈©.");
    } else {
      console.log("‚úÖ Ch·ªâ c√≥ t·ªëi ƒëa 1 OTP h·ª£p l·ªá - ƒê√∫ng nh∆∞ mong ƒë·ª£i!");
    }

    console.log("\n‚ú® HO√ÄN TH√ÄNH KI·ªÇM TRA");
  } catch (error) {
    console.error("‚ùå L·ªói khi test h·ªá th·ªëng OTP:", error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi DB
    process.exit(0);
  }
}

// Ch·∫°y test
testOtpSystem();
